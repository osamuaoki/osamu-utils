#!/bin/sh -e
# vim:set sw=2 sts=2 et filetype=sh ai:
#######################################################################
add_git_sync () {
  echo "\
RO_REMOTE=upstream
RO_TRACK_BRANCH=master
RW_REMOTE=origin
RW_TRACK_BRANCH=upstream" > $(dirname "$PWD")/git-sync.conf
}
#######################################################################
do_git_sync () {
echo "
Update local tracking_branch = $RW_TRACK_BRANCH
       from    remote_branch = $RO_TRACK_BRANCH
       on      remote_repo   = $RO_REMOTE
"
set -x
git checkout "$RW_TRACK_BRANCH"
git fetch "$RO_REMOTE"
git pull "$RO_REMOTE" "$RO_TRACK_BRANCH"
git push "$RW_REMOTE" "$RW_TRACK_BRANCH"
git checkout "$RW_COMMIT_BRANCH"
set +x
#
echo "
To update your local commit branch $RW_COMMIT_BRANCH, do:
  \$ git checkout -b toss_away_branch
  \$ git rebase -i $RW_TRACK_BRANCH
  \$ git merge -s ours $RW_COMMIT_BRANCH
  \$ git checkout $RW_COMMIT_BRANCH
  \$ git branch -D toss_away_branch
  \$ git push $RW_REMOTE $RW_COMMIT_BRANCH

Alternatively, start new local commit branch 'foo', do:
  \$ git checkout $RW_TRACK_BRANCH
  \$ git checkout -b foo
"
}

#######################################################################
PWD="$(pwd)"
if [ ! -d "$PWD/.git" ]; then
  echo "Not in the git repo root directory: $PWD"
  exit 1
fi

RW_COMMIT_BRANCH=$(git branch --list --no-color| sed -n 's/^\* \(.*\)/\1/p')
if [ ! -e $(dirname "$PWD")/git-sync.conf ]; then
  echo "Edit $(dirname "$PWD")/git-sync.conf and re-start" >&2
  add_git_sync
  exit 1
fi
# shellcheck disable=SC2231
for f in $(dirname "$PWD")/git-sync.conf* ; do
  if [ -e "$f" ]; then
    # shellcheck disable=SC1090
    . "$f"
    do_git_sync
  else
    echo "No config: $f"
    exit 1
  fi
done
git checkout "$RW_COMMIT_BRANCH"
# END
