#!/bin/sh -e
## @brief backup with "btrfs subvolume snapshot"
# vim:set ai si sts=2 sw=2 et:
# shellcheck disable=SC2004,SC2086
# -- SC2004 disable due to dash weiredness
# -- SC2086 intentional
##############################################################################
# Copyright 2020 (C) Osamu Aoki <osamu@debian.org>
# License: GPL 2+
##############################################################################

__help () {
cat << END_OF_HELP
NAME
  $BU -- backup with "btrfs subvolume snapshot"

SYNOPSIS
  $BU [OPTIONS] [COMMAND [ARG(s)]]

DESCRIPTION
  $BU is a "btrfs subvolume snapshot" command wrapper to help make and manage
  data backups using the standard data format with the intuitive data history
  representation.

  "snapshot mode" operation:

  1. Creates a readonly snapshot of the specified btrfs subvolume with ISO 8601
     time stamps, e.g.  '2020-09-02T11:51:50+00:00.ro' as its name under
     the "$BU_DIR/" directory using "btrfs subvolume snapshot -r".

  "manage mode" operation:

  1. Check the snapshot subvolumes under the "$BU_DIR/" directory and apply
     desired operations such as keep them, compact them, or remove them.

OPTIONS:
  -t,--type TYPE  use TYPE instead of "ro" for the snapshot type
                  TYPE="post" is used by the automatic snapshot after
                  the package installation.
  -c,--conf RC    use RC.$EXT_CONF and RC.$EXT_FLTR instead of their default
                  $BU_CONF and $BU_FLTR
  -n,--noop       No file nor filesystem modification by prepending pertinent
                  internal commands with "echo __"
  -q,--quiet      quiet (no progress message, just error message)
  -v,--verbose    verbose
  -vv             very verbose for debug
  -vvv            very very verbose for debug
  -x              trace on

SUBCOMMAND: (may be shortened)
  snapshot  make a RO sanpshot under "$BU_DIR/" as <ISO_8601_date>.<name>
  list      list all managed snapshots
  analyze   analyze the aging status of all managed snapshots
  manage    prune snapshots by the aging rule and reduce snapshot size by the
            filtering rule
  zap       zap (=delete) particular snapshots specified by ARGs.
            "zap" is required to be typed in full text.
  template  make template files named after the command name:
              $BU_CONF (aging rule configuration)
              $BU_FLTR (filtering rule configuration)
  restore   make a RW sanpshot under "$BU_DIR/" as <orig_subvol_name>_restore

ARGs:
  Most SUBCOMMANDs take a single ARG specifying the data source PATH.  If ARG
  is omitted, the subvolume containing the current directory (".") is assumed.

  Exceptions are "$BU zap" and "$BU restore".  Here, the first argument is
  mandatory PATH.  So "." must be explicitly specified.

  For "$BU restore", the second argument is the snapshot subvolume name.

  For "$BU zap", the second argument is the action target specifier which can be:
    new:        zap the newest snapshots
    old:        zap the oldest snapshots
    half:       zap the older half of snapshots
    <PATH ...>  zap snapshots specified: "btrfs subvolume delete <PATH ...>"

CONFIGURATION FILES
  $BU_CONF and $BU_FLTR defines aging behavior of readonly Btrfs sanpshots
  and copying behavior of rsync.  For local mode, SRC_* and DST_* are ignored.

CAVEAT:
  The non-root user who executes this command must be a member of "sudo".

Copyright 2021 Osamu Aoki <osamu@debian.org>, GPL 2+
END_OF_HELP
}

#############################################################################
# Constants
#############################################################################
BU="${0##*/}"
VERBOSE_LEVEL=1
BU_DIR=".snap"
BU_TYPE="ro" # ro, pre, post, boot, cron, ...
EXT_CONF="conf"
EXT_FLTR="fltr"
BU_STEM=".$BU"
BU_CONF="$BU_STEM.$EXT_CONF"
BU_FLTR="$BU_STEM.$EXT_FLTR"
NOW_TSTR=$(date -u --iso=second) # time stamp string
NOW_TEPO=$(date +%s -d"$NOW_TSTR") # unix epoch
BU_NMIN="3"             # minimum items to keep (initial)
BU_NMAX="0"             # maximum items to keep (last, if 0, keep all)
BU_TMAX="60*60*24*365"  # 1YR (time to stop aging)
BU_TMID="60*60*24*7*2"  # 2WK (time to stop keeping full backup)
BU_TMIN="60*60*24*2"    # 2DY (time to start aging)
BU_STEP="10"            # aging step 10 %
NOOP=""
SETX_ON=""
SETX_OFF=""
if [ "$(id -u)" = "0" ]; then
  SUDO=""
else
  SUDO="sudo"
fi
BSV="$SUDO btrfs subvolume"

#############################################################################
# System Functions (trap and echo)
##############################################################################
# fd=9 not used elsewhere in this script.
exec 9< "$0"
if ! flock --nonblock 9 ; then
  __echo 0 "$BU already running.  Try later" >&2
  exit 2
fi
# traps
__term_exit () {
  __echo 0 "E: Process externally interrupted.  Terminating."
  exit 1
}
trap '__term_exit' HUP INT QUIT TERM
# dash: EXIT (but no ERR)
__err_exit () {
  __echo 0 "E: Internal process returned an error exit.  Terminating."
  exit 1
}
__exit_exit () {
  exit 0
}
trap '[ $? -eq 0 ] && __exit_exit || __err_exit' EXIT

# echo with verbose level, 0 through 3
VERBOSE_LEVEL="1"
# 0 E:   Quiet     Print fatal errors only                       (-q)
# 1 W/I: Default   Print errors and warnings only                (normal)
# 2 W/I: Verbose   Show equivalent shell commands being executed (-v)
# 3 D:   Debug     Everything                                    (-vv)
__echo () {
  $SETX_OFF
  if [ "$VERBOSE_LEVEL" -ge "$1" ]; then
    shift
    echo "$*" >&2
  fi
  $SETX_ON
}

##############################################################################
# @brief             convert $1 in seconds to day.hh:mm:ss string
# @arg   $1          seconds
# @echo              "day.hh:mm:ss" string
##############################################################################
age_string () {
  # @ $1 second
  SEC="$(($1))"
  MIN=$((SEC/60))
  SEC=$((SEC%60))
  HR=$((MIN/60))
  MIN=$((MIN%60))
  DAY=$((HR/24))
  HR=$((HR%24))
  printf "%2i.%02i:%02i:%02i" "$DAY" "$HR" "$MIN" "$SEC"
}

##############################################################################
# @brief             load config and sanitize it
# @arg   $1          path containing the subvolume to work on (default='.')
# @set   BTRFS_BASE  path to the subvolume to work on
# @set   BU_*        all Btrfs aging related parameters
##############################################################################
# This is basically executed from this host
__load_config () {
##############################################################################
# load parameters
##############################################################################
  if [ -r "$BTRFS_BASE/$BU_CONF" ]; then
    # shellcheck disable=SC1090
    . "$BTRFS_BASE/$BU_CONF"
    __echo 1 "I: sourced $BTRFS_BASE/$BU_CONF"
  fi
##############################################################################
# sanity chack
##############################################################################
  # normalize and sanity check parameters
  if [ "$BU_NMIN" -lt "1" ]; then
    BU_NMIN="1"
  fi
  if [ "$BU_NMAX" -lt "0" ]; then
    BU_NMAX="0"
  fi
  BU_TMIN=$(($BU_TMIN))
  if [ "$BU_TMIN" -lt "60" ]; then
    BU_TMIN="60"
  fi
  BU_TMID=$(($BU_TMID))
  if [ "$BU_TMID" != "0" ] && [ "$BU_TMID" -le "$BU_TMIN" ]; then
    BU_TMID="$(($BU_TMIN+60))"
  fi
  BU_TMAX=$(($BU_TMAX))
  if [ "$BU_TMID" = "0" ] && [ "$BU_TMAX" -lt "$BU_TMIN" ]; then
    BU_TMAX="$(($BU_TMIN+60))"
  fi
  if [ "$BU_TMID" != "0" ] && [ "$BU_TMAX" -lt "$BU_TMID" ]; then
    BU_TMAX="$(($BU_TMID+60))"
  fi
  BU_STEP=$(($BU_STEP))
  if [ "$BU_STEP" -lt "2" ]; then
    BU_STEP=2
  elif [ "$BU_STEP" -gt "98" ]; then
    BU_STEP=98
  fi
  # Human readable string
  S_NMIN="$BU_NMIN"
  if [ "$BU_NMAX" = "0" ]; then
    S_NMAX="No_limit"
  else
    S_NMAX="$BU_NMAX"
  fi
  S_TMIN="$(age_string "$BU_TMIN")"
  if [ "$BU_TMID" = "0" ]; then
    S_TMID="No_compact"
  else
    S_TMID="$(age_string "$BU_TMID")"
  fi
  S_TMAX="$(age_string "$BU_TMAX")"
  __echo 2 "I: NMIN=$S_NMIN, NMAX=$S_NMAX, TMIN=$S_TMIN, TMID=$S_TMID, TMAX=$S_TMAX, STEP=$BU_STEP%"
  __echo 3 "D: NMIN       = '$BU_NMIN' = $S_NMIN"
  __echo 3 "D: NMAX       = '$BU_NMAX' = $S_NMAX"
  __echo 3 "D: TMIN       = '$BU_TMIN' = $S_TMIN"
  __echo 3 "D: TMID       = '$BU_TMID' = $S_TMID"
  __echo 3 "D: TMAX       = '$BU_TMAX' = $S_TMAX"
  __echo 3 "D: STEP       = '$BU_STEP'%"
}

##############################################################################
# @brief             make snapshot
# @read  BTRFS_BASE  base of snapshot in destination host
# @read  BU_TYPE     snapshot <name> to use (normally 'ro')
# @read  NOW_TSTR    time stamp
##############################################################################
__snapshot () {
  $NOOP $SUDO mkdir -p "$BTRFS_BASE/$BU_DIR" >/dev/null
  while [ -d "$BTRFS_BASE/$BU_DIR/${NOW_TSTR}.${BU_TYPE}" ]; do
    sleep "1s"
    NOW_TSTR=$(date -u --iso=second)
  done
  # shellcheck disable=SC2086
  $NOOP $BSV snapshot -r "$BTRFS_BASE" "$BTRFS_BASE/$BU_DIR/${NOW_TSTR}.${BU_TYPE}"
}

##############################################################################
# @brief             list snapshot time stamp of Btrfs (old->new order)
# @call __list $1 $2
# @read  $1          ro, .* (egrep pattern)
# @read  $2          "-r" for reverse, "" for normal
# @read  BTRFS_BASE  base of snapshots
# @echo              snapshot time stamps
##############################################################################
RE_ISO='[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[-+]00:00'
__list () {
  __echo 3 "D: list of readonly snapshots in $BTRFS_BASE/$BU_DIR"
  if [ -d "$BTRFS_BASE/$BU_DIR" ]; then
    cd "$BTRFS_BASE/$BU_DIR" >/dev/null
    # shellcheck disable=SC2010
    { ls -1d "${2}" -- * 2>/dev/null || true ; }| \
      grep -E "^$RE_ISO\.${1}\$" || true
  else
    echo "E: No 'list' since no Btrfs snapshots found at BTRFS_BASE='$BTRFS_BASE'" >&2
    exit 1
  fi
}

##############################################################################
# @brief             aging analysis of time stamps of Btrfs
# @call              __list
# @read  BTRFS_BASE  base of Btrfs set by __load_config
# @read  BU_*        all Btrfs aging related parameters set by __load_config
# @echo              snapshot time stamps with + or - prepended
##############################################################################
__analyze () {
  __echo 3 "D: analyzing base readonly snapshots for $BTRFS_BASE"
  # I    >  NMAX, drop if NMAX>0                    "-"
  # I    <= NMIN, keep                              "+"
  # TAGE >  TMAX, keep and stop aging rule          "#"
  # TAGE >  TMID, drop if TYPE=post                 "-"
  # TAGE >  TMID, drop if age fails the step rule   "-"
  # TAGE >  TMID, keep if age passes the step rule  "#"
  # TAGE >  TMIN, drop if age fails the step rule   "-"
  # TAGE >  TMIN, keep if age passes the step rule  "+"
  BU_TSTEP=$((BU_TMAX*BU_STEP/100))
  BU_TLAST="$BU_TMAX"
  # search in direction: old -> new
  BU_LIST="$(__list '.*')"
  BU_N="$(echo "$BU_LIST" | wc -w)"
  # count down
  BU_I="$BU_N"
  for BU_SV in $BU_LIST ; do
    # Scan                     Scan from Old to New
    # Time   Old    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  New
    # Epoch  Small  -------------------------------------  Large
    # I             N-1 ............................... 0
    # LAST          BU_TEPO(LAST)                NOW_TEPO  diff=TLAST
    # LAST             BU_TEPO(THIS)             NOW_TEPO  diff=TAGE
    BU_I=$((BU_I-1))
    BU_TSTR="${BU_SV%%.*}"
    BU_TYPE="${BU_SV##*.}"
    BU_TEPO=$(date '+%s' -d"$BU_TSTR")
    BU_TAGE=$((NOW_TEPO-BU_TEPO))  # age of SV in seconds
    S_TAGE="$(age_string $BU_TAGE)"
    # delta age of SV in seconds from last SV kept
    BU_TDEL=$((BU_TLAST-BU_TAGE))
    if [ "$BU_TDEL" -lt "0" ]; then
      BU_TDEL=0
    fi
    # I    >  NMAX, drop if NMAX>0                    "-"
    if [ "$BU_I" -ge "$BU_NMAX" ] && [ "$BU_NMAX" -gt "0" ]; then
      __echo 2 " drop $BU_I >= NMAX=$S_NMAX (very old)"
      echo "-$BU_SV"
    # I    <= NMIN, keep                              "+"
    elif [ "$BU_I" -lt "$BU_NMIN" ]; then
      __echo 2 " keep I=$BU_I << NMIN=$S_NMIN (initial)"
      echo "+$BU_SV"
    # TAGE >  TMAX, keep and stop aging rule          "#"
    elif [ "$BU_TAGE" -ge "$BU_TMAX" ]; then
      __echo 2 " keep TAGE=$BU_TAGE >= TMAX=$S_TMAX (old)"
      if [ "$BU_TMID" != "0" ]; then
        echo "#$BU_SV"
      else
        echo "+$BU_SV"
      fi
      BU_TLAST="$BU_TAGE"
      BU_TSTEP=$((BU_TLAST*BU_STEP/100))
    # TAGE >  TMID, drop if TYPE=post                 "-"
    elif [ "$BU_TAGE" -ge "$BU_TMID" ] && [ "$BU_TYPE" = "post" ] && [ "$BU_TMID" != "0" ] ; then
      __echo 2 " drop TMID=$S_TMID >> TAGE=$S_TAGE >= TMIN=$S_TMIN, TYPE=$BU_TYPE (post SV)"
      echo "-$BU_SV"
    # TAGE >  TMID, drop if age fails the step rule   "-"
    elif [ "$BU_TAGE" -ge "$BU_TMID" ] && [ "$BU_TDEL" -lt "$BU_TSTEP" ] && [ "$BU_TMID" != "0" ]; then
      __echo 2 " drop TMAX=$S_TMAX >> TAGE=$S_TAGE >= TMID=$S_TMID, TDEL=$BU_TDEL << TSTEP=$BU_TSTEP (older)"
      echo "-$BU_SV"
    # TAGE >  TMID, keep if age passes the step rule  "#"
    elif [ "$BU_TAGE" -ge "$BU_TMID" ] && [ "$BU_TMID" != "0" ]; then # "$BU_TDEL" -ge "$BU_TSTEP"
      __echo 2 " keep TMAX=$S_TMAX >> TAGE=$S_TAGE >= TMID=$S_TMID, TDEL=$BU_TDEL >= TSTEP=$BU_TSTEP (older)"
      echo "#$BU_SV"
      BU_TLAST="$BU_TAGE"
      BU_TSTEP=$((BU_TLAST*BU_STEP/100))
    # TAGE >  TMIN, drop if age fails the step rule   "-"
    elif [ "$BU_TAGE" -ge "$BU_TMIN" ] && [ "$BU_TDEL" -lt "$BU_TSTEP" ]; then
      __echo 2 " drop TMID=$S_TMID >> TAGE=$S_TAGE >= TMIN=$S_TMIN, TDEL=$BU_TDEL << TSTEP=$BU_TSTEP (newer)"
      echo "-$BU_SV"
    # TAGE >  TMIN, keep if age passes the step rule  "+"
    elif [ "$BU_TAGE" -ge "$BU_TMIN" ]; then
      __echo 2 " keep TMID=$S_TMID >> TAGE=$S_TAGE >= TMIN=$S_TMIN, TDEL=$BU_TDEL >= TSTEP=$BU_TSTEP (newer)"
      echo "+$BU_SV"
      BU_TLAST="$BU_TAGE"
      BU_TSTEP=$((BU_TLAST*BU_STEP/100))
    else # BU_TAGE -lt BU_MIN
      __echo 2 " keep TMID=$S_TMIN >> TAGE=$S_TAGE, TDEL=$BU_TDEL >= TSTEP=$BU_TSTEP (very new)"
      echo "+$BU_SV"
      BU_TLAST="$BU_TAGE"
      BU_TSTEP=$((BU_TLAST*BU_STEP/100))
    fi
  done
}

##############################################################################
# @brief             prune aged snapshots
# @call              __analyze
# @read  BTRFS_BASE  base of Btrfs set by __load_config
# @read  BU_*        all Btrfs aging related parameters set by __load_config
##############################################################################
__manage () {
  for XBU_SV in $(__analyze); do
    # drop first character + or - or #
    BU_SV="${XBU_SV#?}"
    BU_TYPE="${BU_SV##*.}"
    BU_EXTRA="${BU_TYPE##*_}"
    if [ -z "${XBU_SV%%-*}" ]; then
      __echo 1 "I: delete snapshot of $BTRFS_BASE @ $BU_SV"
      # shellcheck disable=SC2086
      $NOOP $BSV delete "$BTRFS_BASE/$BU_DIR/$BU_SV"
    elif [ -z "${XBU_SV%%#*}" ] && [ "$BU_EXTRA" != "compact" ]; then
      __echo 1 "I: compact snapshot of $BTRFS_BASE @ $BU_SV"
      # shellcheck disable=SC2086
      $NOOP $BSV snapshot "$BTRFS_BASE/$BU_DIR/$BU_SV" "$BTRFS_BASE/$BU_DIR/$BU_TSTR.tmp"
      # shellcheck disable=SC1090
      { cd "$BTRFS_BASE/$BU_DIR/$BU_TSTR.tmp" >/dev/null ; cat $BU_FLTR | $SUDO sh; }
      # shellcheck disable=SC2086
      $NOOP $BSV snapshot "$BTRFS_BASE/$BU_DIR/$BU_TSTR.tmp" "$BTRFS_BASE/$BU_DIR/${BU_SV}_compact"
      # shellcheck disable=SC2086
      $NOOP $BSV delete "$BTRFS_BASE/$BU_DIR/$BU_TSTR.tmp"
      # shellcheck disable=SC2086
      $NOOP $BSV delete "$BTRFS_BASE/$BU_DIR/$BU_SV"
    else
      __echo 1 "I: keep snapshot of $BTRFS_BASE @ $BU_SV"
    fi
  done
}

##############################################################################
# @brief             restore specified snapshot as RW
# @call              __load_config
# @read  BTRFS_BASE  base of Btrfs set by __load_config
##############################################################################
__restore () {
  BU_SV="${1}"
  __echo 1 "I: restore snapshot of $BTRFS_BASE @ $BU_SV"
  # shellcheck disable=SC2086
  $NOOP $BSV snapshot "$BTRFS_BASE/$BU_DIR/$BU_SV" "$BTRFS_BASE/$BU_DIR/${BU_SV}_rw"
}
##############################################################################
# @brief             zap specified snapshots
# @call              __load_config, __list
# @read  BTRFS_BASE  base of Btrfs set by __load_config
##############################################################################
__zap () {
  if [ "$BU_ZAP_ACTIVE" != "true" ]; then
      __echo 0 "E: No zap operation since $BTRFS_BASE/$BU_CONF has BU_ZAP_ACTIVE='$BU_ZAP_ACTIVE'"
      exit 1
  fi
  __echo 3 "D: zap readonly snapshots in $BTRFS_BASE/$BU_DIR"
  case "$1" in
    half) # half
      # search in reverse direction: old -> new
      BU_LIST="$(__list '.*' -r)"
      BU_N="$(echo "$BU_LIST" | wc -w)"
      # count down
      BU_I="$BU_N"
      BU_NH="$(((BU_N)/2))"
      if [ "$BU_NH" -lt "$BU_NMIN" ]; then
        BU_NH="$BU_NMIN"
      fi
      for BU_SV in $BU_LIST ; do
        BU_I=$((BU_I-1))
        if [ "$BU_I" -gt "$BU_NH" ]; then
          __echo 1 "I: delete snapshot of $BTRFS_BASE @ $BU_SV"
          $NOOP $BSV delete "$BTRFS_BASE/$BU_DIR/$BU_SV"
        else
          __echo 1 "I: keep   snapshot of $BTRFS_BASE @ $BU_SV"
        fi
      done
      ;;
    new*) # newest
      __echo 2 "I: zap newest snapshots at $BTRFS_BASE"
      $NOOP $BSV delete "$BTRFS_BASE/$BU_DIR/$ID_LAST"
      ;;
    old*) # oldest
      __echo 2 "I: zap oldest snapshots at $BTRFS_BASE"
      # shellcheck disable=SC2046
      $NOOP $BSV delete "$BTRFS_BASE/$BU_DIR/$ID_FIRST"
      ;;
    *) # labels (local only now)
      __echo 2 "I: zap snapshots at $BTRFS_BASE"
      for d in "${@}"; do
        if [ -e "$BTRFS_BASE/$BU_DIR/$d" ]; then
          __echo 1 "I: delete snapshot of $BTRFS_BASE @ $d"
          $NOOP $BSV delete "$BTRFS_BASE/$BU_DIR/$d"
        else
          __echo 1 "W: missing zap snapshot of $BTRFS_BASE @ $d"
        fi
      done
      ;;
  esac
}

##############################################################################
# @brief             make template BU_CONF and BU_FLTR at $(pwd)
# @create            BU_CONF BU_FLTR files at newly calculated BTRFS_BASE
#
# syntax:
#   $BU template [<BTRFS_BASE>]
##############################################################################
__template () {
  # sanity check
  if [ -e "$BTRFS_BASE/$BU_CONF" ]; then
    __echo 0 "E: configuration file already exists: $BTRFS_BASE/$BU_CONF"
    exit 1
  elif [ -e "$BTRFS_BASE/$BU_FLTR" ] ; then
    __echo 0 "E: configuration file already exists: $BTRFS_BASE/$BU_FLTR"
    exit 1
  fi
  ############################################################################
  #
  # conf and filter template
  #
  ############################################################################
  __echo 2 "I: make template $BTRFS_BASE/$BU_CONF and $BTRFS_BASE/$BU_FLTR file"
  $SUDO tee "$BTRFS_BASE/$BU_CONF" >/dev/null << END_OF_TEMPLATE
# $BU configuration (Btrfs)

# This configuration file as generated by the "template" command.

### DATA AGING PARAMETERS for Btrfs ###

BU_NMIN="$BU_NMIN"  # minimum items to keep (initial)
BU_NMAX="$BU_NMAX"  # maximum items to keep (last, if 0, keep all)
BU_TMAX="$BU_TMAX"  # TAGE=$(age_string $BU_TMAX) stop aging
BU_TMID="$BU_TMID"  # TAGE=$(age_string $BU_TMID) compact (if 0, no compact)
BU_TMIN="$BU_TMIN"  # TAGE=$(age_string $BU_TMIN) start aging
BU_STEP="$BU_STEP"  # aging step $BU_STEP %

### EXTRA PARAMETERS ###

# safety (change this if you want to disable some zap operations)
BU_ZAP_ACTIVE="true"

# You can add custom filtering for prune using $BU_FLTR in this directory
END_OF_TEMPLATE

  $SUDO tee "$BTRFS_BASE/$BU_FLTR" >/dev/null << 'END_OF_TEMPLATE'
# $BU configuration (prune)
#
###### Example for system subvolume at / (use relative path)
### Remove all files under /tmp
#rm -rf tmp var/cache
### Remove /usr excluding /usr/local
#find /usr -maxdepth 1 -type d ! -name local -exec rm -rf '{}' +

###### Example for home subvolume at /home (use relative path)
### Remove all files under .cache
#rm -rf */.cache
END_OF_TEMPLATE

  # match owner with the parent directory
  UID=$(stat -c %u "$BTRFS_BASE")
  GID=$(stat -c %g "$BTRFS_BASE")
  $NOOP $SUDO chown $UID:$GID "$BTRFS_BASE/$BU_CONF"
  $NOOP $SUDO chown $UID:$GID "$BTRFS_BASE/$BU_FLTR"
}


##############################################################################
# Parse Command Line
##############################################################################
# The quotes around "$@" are essential!
# We need TEMP as the 'eval set --' would nuke the return value of getopt.
TEMP=$(getopt -o 't:c:nqvxh' -n "${BU}" \
  --long 'type:,config:,noop,quiet,verbose,trace,help' -- "$@")
# Note the quotes around "$TEMP": they are essential!
#echo "DEBUG: ***** TEMP='$TEMP'"
eval set -- "$TEMP"
unset TEMP
# OPTIONS
while [ -n "$1" ]; do
  case "$1" in
    -t|--type)
      shift
      BU_TYPE="$1"
      ;;
    -c|--config)
      shift
      BU_STEM="$1"
      ;;
    -n|--noop)
      NOOP="echo __" # ANY non ""
      ;;
    -q|--quiet)
      VERBOSE_LEVEL=0
      ;;
    -v|--verbose)
      VERBOSE_LEVEL=$((VERBOSE_LEVEL+1))
      ;;
    -x|--trace)
      SETX_ON="set -x"
      SETX_OFF="set +x"
      ;;
    -h|--help)
      __help
      exit 0
      ;;
    '--')
      shift
      break
    ;;
    -*)
      echo "E: Unknown option: '$1'" >&2
      __help
      exit 1
    ;;
    *)
      break
    ;;
  esac
  shift
done
# derivative parameters
BU_CONF="$BU_STEM.$EXT_CONF"
BU_FLTR="$BU_STEM.$EXT_FLTR"
$SETX_ON
##############################################################################
# find the base path of btrfs: BTRFS_BASE
##############################################################################
BU_COMMAND="$1"
BTRFS_BASE0=$(realpath "${2:-.}")
BTRFS_BASE="$BTRFS_BASE0"
# sanity check
if [ "$(stat -f -c %T "$BTRFS_BASE")" != "btrfs" ]; then
  __echo 0 "E: Not on Btrfs: $BTRFS_BASE0"
  exit 1
fi
while true; do
  if [ "$(stat -c %i "$BTRFS_BASE")" = "256" ]; then
    break
  fi
  # sanity check
  if [ "$(stat -f -c %T "$BTRFS_BASE")" != "btrfs" ] || \
     [ "$BTRFS_BASE" = "/" ]; then
    __echo 0 "E: No inode=256 on Btrfs found from: $BTRFS_BASE0"
    exit 1
  fi
  BTRFS_BASE=$(realpath "$BTRFS_BASE/..")
  __echo 2 "D: check Btrfs: $BTRFS_BASE inode=$(stat -c %i "$BTRFS_BASE")"
done
__echo 1 "I: base of Btrfs: $BTRFS_BASE"
##############################################################################
__echo 3 "D: NOOP          = '$NOOP'"
__echo 3 "D: BU_CONF       = '$BU_CONF'"
__echo 3 "D: BU_FLTR       = '$BU_FLTR'"
__echo 3 "D: BU_TYPE       = '$BU_TYPE'"
__echo 3 "D: VERBOSE_LEVEL = '$VERBOSE_LEVEL'"
#############################################################################
case "$BU_COMMAND" in
  s*) #snapshot
    __load_config "$BTRFS_BASE"
    __snapshot
    ;;
  l*) # list
    __load_config "$BTRFS_BASE"
    __list '.*'
    ;;
  a*) # analyze
    __load_config "$BTRFS_BASE"
    __analyze
    ;;
  m*) # manage
    __load_config "$BTRFS_BASE"
    __manage
    ;;
  r*) # restore
    __load_config "$BTRFS_BASE"
    shift 2
    __restore "$@"
    ;;
  zap) # zap
    __load_config "$BTRFS_BASE"
    shift 2
    __zap "$@"
    ;;
  t*) # template
    __template "$BTRFS_BASE"
    ;;
  h*|'') # help
    __help
    exit 0
    ;;
  *) # unknown
    echo "E: Unknown command: '$1'" >&2
    __help
    exit 1
    ;;
esac
