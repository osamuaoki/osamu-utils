#!/bin/sh -e
## @brief backup with "rsync" and "btrfs subvolume snapshot"
# vim:se ai ts=2 sts=2 sw=2 et:
##############################################################################
# Copyright 2020 (C) Osamu Aoki <osamu@debian.org>
# License: GPL 2+
##############################################################################

__help () {
echo "\
NAME
  $BU -- backup with \"rsync\" and \"btrfs subvolume snapshot\"

SYNOPSIS
  $BU [OPTIONS] [COMMAND [ARG(s)]]

DESCRIPTION
  $BU is a \"rsync\" and \"btrfs subvolume snapshot\" command wrapper to help
  make and manage data backups using the standard data format with the
  intuitive data history representation.

  \"remote mode\" operation:

  1. \"rsync\" copies data from the actively used working data on one storage
     device to a separate storage device formatted with Btrfs on the same host.
     This improves robustness of the stored data against device failures.  (All
     HDD/SSD will die at some point in future.)
  2. \"btrfs subvolume snapshot\" creates readonly snapshots of the copied data
     with ISO 8601 time stamps, e.g. '2020-09-02T11:51:50+00:00' as the file
     path.

  \"local mode\" operation:

  1. \"btrfs subvolume snapshot\" creates readonly snapshots of the working
     data on a storage device formatted in Btrfs with ISO 8601 time stamps,
     e.g. '2020-09-02T11:51:50+00:00' as the file path.

OPTIONS:
  -l,--local    $BU_MES_L
  -r,--remote   $BU_MES_R
  -i,--id ID    use ID for the snapshot name instead of the time stamp
  -c,--conf RC  use RC.$EXT_CONF and RC.$EXT_FLTR instead of their default
                $BU_CONF0 and $BU_FLTR0
  -n,--noop     No file nor filesystem modification by prepending pertinent
                internal commands with \"echo __\"
  -q,--quiet    quiet (no echo except error message)
  -v,--verbose  verbose
  -vv           very verbose for debug
  -vvv          extremely verbose for debug with shell command trace

SUBCOMMAND: (may be shortened)
  snapshot  make a sanpshot under \"$BU_DIR/\" as \<ISO_8601_date>
  list      list ISO 8601 time stamps of all snapshots
  analyze   analyze the aging status of all snapshots
  prune     prune snapshots based on the aging status
  zap       zap particular snapshots specified by ARGs (no short form)
            \"zap\" is required to be typed in full text.
  template  make template files:
              $BU_CONF0 (always)
              $BU_FLTR0 (used only for remote mode)
  rsync     copy data from local data to remote data using \"rsync\" with
            $BU_FLTR0 (no Btrfs operation)

  Prepending these subcommands with \"r\" sets \"-r\" option.

ARGs:
  Most SUBCOMMANDs take a single ARG specifying the data source PATH.  If ARG
  is omitted, the current directory (\".\") is assumed.  $BU makes reasonable
  efforts to reduce PATH to the root of the mounted Btrfs or to the directory
  where $BU_CONF0 is found.  You can lazily issue $BU command anywhere on your
  working data directory tree.

  One exception is \"$BU --remote template <RSYNC_DST> [<RSYNC_SRC>]\".   Here,
  <RSYNC_DST> specifies the rsync destination which may be on Btrfs.  The
  optional <RSYNC_SRC> specifies the directory where the configuration files
  are generated.  If <RSYNC_SRC> is omitted, the current directory (\".\") is
  assumed.

  Another exception is \"$BU zap ARG_1 ARG_2\".  Here, ARG_1 is mandatory PATH
  (usually \".\") and ARG_2 is the target specifier which can be:
    new:        zap the newest snapshots
    old:        zap the oldest snapshots
    half:       zap the older half of snapshots
    <PATH ...>  zap snapshots specified: \"btrfs subvolume delete <PATH ...>\"

CONFIGURATION FILES
  $BU_CONF0 and $BU_FLTR0 defines aging behavior of readonly Btrfs sanpshots
  and copying behavior of rsync.  For local mode, RSYNC_SRC and RSYNC_DST are
  ignored.

HINT
  You can start this $BU under different \$0 value by creating symlink and
  using it to start this $BU.  If \$0 starts with \"r\", \"-r\" option is
  automatically set.  Otherwise, you can set \"-l\" option.  I suggest using
  \"bu\" and \"rbu\" as good choices for \$0 if these names are not already used by
  others.  Default configuration file names matche with \$0.

CAVEAT:
  Currently, this $BU is designed and used for cases where the source and
  destination of rsync are on the same host.

  The user who executes this command must be a member of \"sudo\".

Copyright 2020 Osamu Aoki <osamu@debian.org>, GPL 2+"
}

#############################################################################
# Constants
#############################################################################
BU="${0##*/}"
UID=$(id -u)
VERBOSE_LEVEL=1
BU_ID=""
BU_DIR=".snap"
EXT_CONF="conf"
EXT_FLTR="fltr"
BU_STEM=".$BU"
BU_CONF0="$BU_STEM.$EXT_CONF"
BU_FLTR0="$BU_STEM.$EXT_FLTR"
NOW_TS=$(date -u --iso=second) # time stamp
NOW_EP=$(date +%s -d"$NOW_TS") # unix epoch
BU_MIN="3"             # aging keep initial minimum items
BU_SHRT="24*60*60"     # aging short threashold 1 day
BU_LONG="365*24*60*60" # aging long  threashold 1 year
BU_STEP="10"           # aging step %
SUSH="sudo sh -c"
BSV="sudo btrfs subvolume"
#############################################################################
# RSYNC Constants
##############################################################################
#
#   https://www.sanitarium.net/golug/rsync+btrfs_backups_2011.html
#     rsync --archive --one-file-system --hard-links --inplace --numeric-ids \
#       --delete --delete-excluded --exclude-from=excludefile host:/src/ /dest/
#
#   https://wiki.debian.org/Btrfs
#
# rsync command and options
#     -a --archive     == -rlptgoD
#     -H --hard-links
#     (-A --acls)
#     (-X --xattrs)
#     -x --one-file-system
#     --inplace
#     --delete-during
#
# Please note --delete-excluded can't be used to avoid trying to remove
# mount points used by other submodules (Need to check "protect")
RSYNC="sudo rsync -aHx --inplace --delete-during --numeric-ids"
#############################################################################
# System Functions (trap and echo)
##############################################################################
# fd=9 not used elsewhere in this script.
exec 9< "$0"
if ! flock --nonblock 9 ; then
  __echo 0 "$BU already running.  Try later" >&2
  exit 2
fi
# traps
__term_exit () {
  __echo 0 "E: Process externally interrupted.  Terminating."
  exit 1
}
trap '__term_exit' HUP INT QUIT TERM
# dash: EXIT (but no ERR)
__err_exit () {
  __echo 0 "E: Internal process returned an error exit.  Terminating."
  exit 1
}
__exit_exit () {
  exit 0
}
trap '[ $? -eq 0 ] && __exit_exit || __err_exit' EXIT
# echo with verbose level, 0 through 3
VERBOSE_LEVEL="1"
# 0 E:   Quiet     Print fatal errors only                       (-q)
# 1 W/I: Default   Print errors and warnings only                (normal)
# 2 W/I: Verbose   Show equivalent shell commands being executed (-v)
# 3 D:   Debug     Everything                                    (-vv)
__echo () {
if [ "$VERBOSE_LEVEL" -ge "$1" ]; then
  shift
  echo "$*" >&2
fi
}
__eval () {
  if [ "$VERBOSE_LEVEL" -ge 2 ]; then
    echo ">>> $*"
  fi
  eval "$*"
}
##############################################################################
# Internal Functions
##############################################################################

##############################################################################
# @brief             convert $1 in seconds to day.hh:mm:ss string
# @arg   $1          seconds
# @echo              "day.hh:mm:ss" string
##############################################################################
age_string () {
  # @ $1 second
  SEC="$1"
  MIN=$((SEC/60))
  SEC=$((SEC%60))
  HR=$((MIN/60))
  MIN=$((MIN%60))
  DAY=$((HR/24))
  HR=$((HR%24))
  printf "%2i.%02i:%02i:%02i" "$DAY" "$HR" "$MIN" "$SEC"
}

##############################################################################
# @brief             set $BU_MODE by $1
# @arg   $1          value to set to $BU_MODE
# @set   $BU_MODE    Backup mode: 'local' or 'remote'
# @err               print error message with $2 and exit
##############################################################################
__set_bu_mode () {
  if [ -z "$BU_MODE" ]; then
    BU_MODE="$1"
  elif  [ "$BU_MODE" = "$1" ]; then
    :
  else
    __echo 0 "E: Can't change BU_MODE from '$BU_MODE' to '$1' ($2)"
    exit 1
  fi
}

##############################################################################
# @brief             test $1 is Btrfs mount point or not
# @arg   $1          path to the directory to b checked
# @set   $?          true if $1 is Btrfs mount point
##############################################################################
__is_btrfs_mount_point () {
  mount |cut -d ' ' -f "3,5"|grep " btrfs$"|sort -r|grep -q -e "^$1 btrfs\$"
}

##############################################################################
# @brief             find base directory holding Btrfs mount point or $BU_CONF
# @arg   $1          path to the directory to work from (default='.')
# @set   BU_BASE     base of $BU_CONF
# @set   BTRFS_BASE  base of Btrfs
##############################################################################
__find_base () {
  # input
  # $1            path to the directory to work from (default='.')
  # return
  # @ BU_BASE     base of $BU_CONF          (set by  __find_base)
  # @ BTRFS_BASE  base of Btrfs             (set by  __find_base)
  d=$(realpath "${1:-.}")
  d0="$d"
  BTRFS_BASE=""
  BU_BASE=""
  while [ "$d" != "/" ]; do
    if __is_btrfs_mount_point "$d"; then
      BTRFS_BASE="$d"
      if [ -f "$d/$BU_CONF" ]; then
        BU_BASE="$d"
      fi
      break
    elif [ -f "$d/$BU_CONF" ]; then
      BU_BASE="$d"
      break
    fi
    d=$(realpath "$d/..")
  done
  # sanity check
  if [ -z "$BTRFS_BASE" ] && [ -z "$BU_BASE" ]; then
    __echo 0 "E: Can't find Btrfs nor .../$BU_CONF for $d0"
    exit 1
  fi
}

##############################################################################
# @brief             load config and sanitize it
# @arg   $1          path to the directory to work from (default='.')
# @set   BU_BASE     base of $BU_CONF                   (set by  __find_base)
# @set   BTRFS_BASE  base of Btrfs                      (set by  __find_base)
# @set   RSYNC_SRC   base of rsync source               (read from $BU_CONF)
# @set   RSYNC_DST   base of rsync destination          (read from $BU_CONF)
# @set   BU_*        all Btrfs aging related parameters
##############################################################################
__load_config () {
##############################################################################
# find base
##############################################################################
  __find_base "$1" # BU_BASE and BTRFS_BASE returned
##############################################################################
# sanity check for BU_BASE and BTRFS_BASE and default value for BU_MODE
##############################################################################
  if [ -z "$BTRFS_BASE" ]; then
    # not on Btrfs
    __set_bu_mode "remote" "fall-back for no local Btrfs"
  else
    # on Btrfs
    __set_bu_mode "local" "fall-back when local Btrfs usable"
  fi
  __echo 3 "D: BU_MODE       = '$BU_MODE' (finalized in __load_config)"
  # sanity check
  if [ "$BU_MODE" = "local" ]; then
    if [ -z "$BTRFS_BASE" ]; then
      __echo 0 "E: need $BU_BASE to be Btrfs for mode=$BU_MODE operation"
      exit 1
    fi
  else # [ "$BU_MODE" = "remote" ]
    if [ -z "$BU_BASE" ] ; then
      __echo 0 "E: need $BU_BASE/$BU_CONF for mode=$BU_MODE operation"
      exit 1
    fi
  fi
  __echo 2 "I: Before loading parameters: mode='$BU_MODE', BTRFS_BASE='$BTRFS_BASE', BU_BASE='$BU_BASE'"
##############################################################################
# load parameters
##############################################################################
  if [ "$BU_MODE" = "local" ]; then
    if [ -n "$BU_BASE" ]; then
      __echo 2 "I: found $BU_BASE/$BU_CONF for mode=$BU_MODE operation"
      # shellcheck disable=SC1090
      . "$BU_BASE/$BU_CONF"
      __echo 2 "I: sourced $BU_BASE/$BU_CONF as mode=$BU_MODE"
    else
      __echo 2 "I: not found $BTRFS_BASE/$BU_CONF but on Btrfs=$BTRFS_BASE for mode=$BU_MODE operation"
    fi
    # Set these to be on safe side and ignore values in $BU_BASE/$BU_CONF
    RSYNC_SRC="$BTRFS_BASE"
    RSYNC_DST="$BTRFS_BASE"
  else # [ "$BU_MODE" = "remote" ]
    __echo 2 "I: found $BU_BASE/$BU_CONF for mode=$BU_MODE operation"
    # shellcheck disable=SC1090
    . "$BU_BASE/$BU_CONF"
    __echo 2 "I: sourced $BU_BASE/$BU_CONF as mode=$BU_MODE"
    if __is_btrfs_mount_point "$RSYNC_DST" ; then
      BTRFS_BASE="$RSYNC_DST"
    else
      __echo 0 "W: non-Btrfs RSYNC_DST='$RSYNC_DST' in $BU_BASE/$BU_CONF"
      BTRFS_BASE=""
    fi
  fi
##############################################################################
# sanity chack
##############################################################################
  # sanity check for rsync parameters
  if [ "$BU_MODE" = "remote" ]; then
    if [ "$RSYNC_SRC" != "$BU_BASE" ] && [ "$RSYNC_DST" != "$BU_BASE" ]; then
      __echo 0 "E: One of RSYNC_SRC='$RSYNC_SRC' and RSYNC_DST='$RSYNC_DST' must match in BU_BASE='$BU_BASE' for mode=$BU_MODE."
      exit 1
    fi
    if [ "$RSYNC_SRC" = "$RSYNC_DST" ]; then
      __echo 0 "E: RSYNC_SRC='$RSYNC_SRC' and RSYNC_DST='$RSYNC_DST' are the same in $BU_BASE/$BU_CONF for mode=$BU_MODE."
      exit 1
    fi
  fi
  # sanity check for aging parameters
  BU_INDEX_MIN="${BU_INDEX_MIN:-$BU_MIN}" # items min.
  if [ "$BU_INDEX_MIN" -lt "0" ]; then
    BU_INDEX_MIN="0"
  fi
  BU_AGE_SHRT="${BU_AGE_SHRT:-$((BU_SHRT))}" # short age
  BU_AGE_LONG="${BU_AGE_LONG:-$((BU_LONG))}" # long age
  if [ "$BU_AGE_SHRT" -lt "60" ]; then
    BU_AGE_SHRT=60
  fi
  if [ "$BU_AGE_LONG" -lt "$BU_AGE_SHRT" ]; then
    BU_AGE_LONG="$BU_AGE_SHRT"
  fi
  BU_AGE_STEP="${BU_AGE_STEP:-10}" # 10% reduced geometric gap for mid range aging
  if [ "$BU_AGE_STEP" -lt "2" ]; then
    BU_AGE_STEP=2
  elif [ "$BU_AGE_STEP" -gt "50" ]; then
    BU_AGE_STEP=50
  fi
  # "forget" for erasing really old data > BU_AGE_LONG for aging
  if [ "$AGE_MODE" != "forget" ]; then
    AGE_MODE="keep" # this is default
  fi
  # preparation
  if [ -n "$BTRFS_BASE" ] && [ ! -e "$BTRFS_BASE/$BU_DIR" ]; then
    __eval "$SUDO mkdir -p '$BTRFS_BASE/$BU_DIR' >/dev/null"
  fi
  # result of loading
  __echo 3 "D: BU_INDEX_MIN  = '$BU_INDEX_MIN'"
  __echo 3 "D: BU_AGE_SHRT   = '$BU_AGE_SHRT' = $(age_string "$BU_AGE_SHRT")"
  __echo 3 "D: BU_AGE_LONG   = '$BU_AGE_LONG' = $(age_string "$BU_AGE_LONG")"
  __echo 3 "D: BU_AGE_STEP   = '$BU_AGE_STEP'%"
  __echo 3 "D: AGE_MODE      = '$AGE_MODE'"
  __echo 3 "D: RSYNC_SRC     = '$RSYNC_SRC'"
  __echo 3 "D: RSYNC_DST     = '$RSYNC_DST'"
}

##############################################################################
# @brief             rsync from RSYNC_SRC to RSYNC_DST using BU_FLTR filter
# @read  RSYNC_SRC   base of rsync source set by __load_config
# @read  RSYNC_DST   base of rsync destination set by __load_config
# @read  BU_FLTR     rsync filter configuration file name
# @set   BTRFS_BASE  update f rsync is run and RSYNC_DST is Btrfs
##############################################################################
__rsync () {
  if [ "$RSYNC_SRC" != "$RSYNC_DST" ]; then
    __echo 2 "I: rsync RSYNC_SRC:'$RSYNC_SRC' -> RSYNC_DST:'$RSYNC_DST'"
    if [ "$VERBOSE_LEVEL" -eq "1" ]; then
      RSYNC="$RSYNC -v"
    elif [ "$VERBOSE_LEVEL" -eq "2" ]; then
      RSYNC="$RSYNC -vv"
    elif [ "$VERBOSE_LEVEL" -eq "3" ]; then
      RSYNC="$RSYNC -vv"
    elif [ "$VERBOSE_LEVEL" -ge "4" ]; then
      RSYNC="$RSYNC -vvv"
    fi
    # protect snapshot mount directory
    RSYNC="$RSYNC --filter '- $RSYNC_SRC/$BU_DIR'"
    # ensure copying configurations used
    RSYNC="$RSYNC --filter '+ $RSYNC_SRC/$BU_CONF'"
    RSYNC="$RSYNC --filter '+ $RSYNC_SRC/$BU_FLTR'"
    # load user provided filter if exists
    if [ -e "$RSYNC_SRC/$BU_FLTR" ]; then
      RSYNC="$RSYNC --filter '. $RSYNC_SRC/$BU_FLTR'"
    fi
    # action!
    __eval "$RSYNC '$RSYNC_SRC/' '$RSYNC_DST/'"
  fi
}

##############################################################################
# @brief             make snapshot on BTRFS_BASE
# @read  BTRFS_BASE  base of Btrfs set by __load_config
# @read  BU_ID       snapshot id to use (normally '')
# @read  NOW_TS      time stamp
##############################################################################
__snapshot0 () {
  if [ -n "$BTRFS_BASE" ]; then
    if [ -z "$BU_ID" ]; then
      while [ -d "$BTRFS_BASE/$BU_DIR/$NOW_TS" ]; do
        sleep "1s"
        NOW_TS=$(date -u --iso=second)
        NOW_EP=$(date +%s -d"$NOW_TS")
      done
      BU_ID="$NOW_TS"
    fi
    __eval "$BSV snapshot -r '$BTRFS_BASE' '$BTRFS_BASE/$BU_DIR/$BU_ID'"
  else
    __echo 3 "D: No snapshot since BTRFS_BASE='$BTRFS_BASE'"
    exit 1
  fi
}

##############################################################################
# @brief             (rsync and) make snapshot
# @read  RSYNC_SRC   base of rsync source set by __load_config
# @read  RSYNC_DST   base of rsync destination set by __load_config
# @read  BU_FLTR     rsync filter configuration file name
# @read  BTRFS_BASE  base of Btrfs set by __load_config
# @read  BU_ID       snapshot id to use (normally '')
# @read  NOW_TS      time stamp
##############################################################################
__snapshot () {
  __rsync
  __snapshot0
}

##############################################################################
# @brief             list snapshot time stamp of Btrfs (old->new order)
# @read  BTRFS_BASE  base of Btrfs set by __load_config
# @echo              snapshot time stamps
##############################################################################
__list () {
  if [ -n "$BTRFS_BASE" ]; then
    __echo 3 "D: list readonly snapshots in $BTRFS_BASE/$BU_DIR"
    cd "$BTRFS_BASE/$BU_DIR" >/dev/null
    # shellcheck disable=SC2010
    { ls -1d -- * 2>/dev/null || true ; }| grep -E \
        '^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\+00:00$' || true
  else
    __echo 0 "E: no Btrfs found for list"
    exit 1
  fi
}

##############################################################################
# @brief             aging analysis of time stamps of Btrfs
# @call              __list
# @read  BTRFS_BASE  base of Btrfs set by __load_config
# @read  BU_*        all Btrfs aging related parameters set by __load_config
# @echo              snapshot time stamps with + or - prepended
##############################################################################
__analyze () {
  if [ -n "$BTRFS_BASE" ]; then
    __echo 3 "D: analyzing readonly snapshots for $BTRFS_BASE"
    # shellcheck disable=SC2046
    set -- $(__list)
    BU_INDEX="${#}" # newest=1, n items
    BU_INDEX_ORIG="$BU_INDEX"
    if [ "$BU_INDEX" -le "0" ]; then
      __echo 1 "I: No snapshot available yet"
      exit 0
    fi
    BU_AGE_DEL_MAX=$((BU_AGE_LONG*BU_AGE_STEP/100))
    # oldest snapshot
    BU_TS="$1"
    __echo 3 "D: ts = $BU_TS, i = $BU_INDEX out of $BU_INDEX_ORIG snapshots (initial)"
    BU_EP=$(date '+%s' -d"$BU_TS")
    __echo 3 "D: ts = $BU_TS, age_del_max = $(age_string $BU_AGE_DEL_MAX) = $BU_AGE_STEP% of AGE_LONG (initial)"
    BU_AGE=$((NOW_EP-BU_EP))
    if [ "$AGE_MODE" = "forget" ]; then
      if [ "$BU_AGE" -le "$BU_AGE_LONG" ] || \
         [ "$BU_INDEX" -le "$BU_INDEX_MIN" ]; then
        __echo 2 "I: ts = $BU_TS, age:$(age_string "$BU_AGE") <= age_long:$(age_string "$BU_AGE_LONG") or  i:$BU_INDEX <= min:$BU_INDEX_MIN (oldest but not so old or not enough snapshots - keep)"
        echo "+$BU_TS"
      else
        __echo 2 "I: ts = $BU_TS, age:$(age_string "$BU_AGE") >  age_long:$(age_string "$BU_AGE_LONG") and i:$BU_INDEX >  min:$BU_INDEX_MIN (oldest - forget)"
        echo "-$BU_TS"
      fi
    else
      __echo 2 "I: ts = $BU_TS, age:$(age_string "$BU_AGE") (oldest - keep)"
      echo "+$BU_TS"
    fi
    # loop over second oldest snapshot and newer (n-1 items)
    shift
    __echo 3 "D: ts = $BU_TS, age_last    = $(age_string $BU_AGE) (initial)"
    BU_AGE_LAST="$BU_AGE"
    for BU_TS in "${@}"; do
      BU_INDEX=$((BU_INDEX-1))
      BU_EP=$(date '+%s' -d"$BU_TS")
      BU_AGE=$((NOW_EP-BU_EP))
      BU_AGE_DEL=$((BU_AGE_LAST-BU_AGE))
      __echo 3 "D: ts = $BU_TS, i = $BU_INDEX out of $BU_INDEX_ORIG snapshots"
      if [ "$BU_AGE" -gt "$BU_AGE_LONG" ]; then
        __echo 2 "I: ts = $BU_TS, age:$(age_string "$BU_AGE") > age_long:$(age_string "$BU_AGE_LONG") (old)"
        if [ "$AGE_MODE" = "forget" ]; then
          if [ "$BU_INDEX" -le "$BU_INDEX_MIN" ]; then
            __echo 2 "I: ts = $BU_TS, i:$BU_INDEX <= min:$BU_INDEX_MIN (old but NOT enough snapshots) (old - keep)"
            echo "+$BU_TS"
          else
            __echo 2 "I: ts = $BU_TS, i:$BU_INDEX >  min:$BU_INDEX_MIN (old and enough snapshots)     (old - forget)"
            echo "-$BU_TS"
          fi
        else # "$AGE_MODE" = "keep"
          __echo 2 "I: ts = $BU_TS, age_del/,,_max = $((BU_AGE_DEL*100/BU_AGE_DEL_MAX))% = $(age_string $BU_AGE_DEL)/$(age_string $BU_AGE_DEL_MAX)"
          if [ "$BU_AGE_DEL" -gt "$BU_AGE_DEL_MAX" ]; then
            echo "+$BU_TS"
            __echo 3 "D: ts = $BU_TS, age_last    = $(age_string $BU_AGE) from $(age_string $BU_AGE_LAST) (updated in old)"
            BU_AGE_LAST="$BU_AGE"
            __echo 3 "D: ts = $BU_TS, age_del_max = $(age_string $BU_AGE_DEL_MAX) = $BU_AGE_STEP% of AGE_LONG (constant in old)"
          else
            echo "-$BU_TS"
          fi
        fi
      elif [ "$BU_AGE" -gt "$BU_AGE_SHRT" ] && \
           [ "$BU_INDEX" -gt "$BU_INDEX_MIN" ]; then
        __echo 2 "I: ts = $BU_TS, age:$(age_string "$BU_AGE") >  age_shrt:$(age_string "$BU_AGE_SHRT") and i:$BU_INDEX >  min:$BU_INDEX_MIN (middle)"
        if [ "$BU_AGE_DEL" -gt "$BU_AGE_DEL_MAX" ]; then
          __echo 2 "I: ts = $BU_TS, age_del/,,_max = $((BU_AGE_DEL*100/BU_AGE_DEL_MAX))% = $(age_string $BU_AGE_DEL)/$(age_string $BU_AGE_DEL_MAX) (middle - keep)"
          echo "+$BU_TS"
          __echo 3 "D: ts = $BU_TS, age_last    = $(age_string $BU_AGE) from $(age_string $BU_AGE_LAST) (updated in middle)"
          BU_AGE_LAST="$BU_AGE"
          BU_AGE_DEL_MAX=$((BU_AGE_LAST*BU_AGE_STEP/100))
          __echo 3 "D: ts = $BU_TS, age_del_max = $(age_string $BU_AGE_DEL_MAX) = $BU_AGE_STEP% of AGE_LAST (updated in middle)"
        else
          __echo 2 "I: ts = $BU_TS, age_del/,,_max = $((BU_AGE_DEL*100/BU_AGE_DEL_MAX))% = $(age_string $BU_AGE_DEL)/$(age_string $BU_AGE_DEL_MAX) (middle - forget)"
          echo "-$BU_TS"
        fi
      else
        __echo 2 "I: ts = $BU_TS, age:$(age_string "$BU_AGE") <= age_shrt:$(age_string "$BU_AGE_SHRT") or  i:$BU_INDEX <= min:$BU_INDEX_MIN (recent - keep)"
        echo "+$BU_TS"
      fi
    done
  else
    __echo 0 "E: no Btrfs found for analyze"
    exit 1
  fi
}

##############################################################################
# @brief             prune aged snapshots
# @call              __analyze
# @read  BTRFS_BASE  base of Btrfs set by __load_config
# @read  BU_*        all Btrfs aging related parameters set by __load_config
##############################################################################
__prune () {
  if [ -n "$BTRFS_BASE" ]; then
    __echo 3 "D: prune snapshots at $BTRFS_BASE"
    # shellcheck disable=SC2046
    set -- $(__analyze)
    for x in "${@}"; do
      d="${x#?}"
      if [ -z "${x%%-*}" ]; then
        __eval "$BSV delete '$BTRFS_BASE/$BU_DIR/$d'"
      else
        __echo 2 "I: keep  snapshot of $BTRFS_BASE @ $d"
      fi
    done
  else
    __echo 0 "E: no Btrfs found for prune"
    exit 1
  fi
}

##############################################################################
# @brief             zap specified snapshots
# @call              __load_config, __list
# @read  BTRFS_BASE  base of Btrfs set by __load_config
##############################################################################
__zap () {
  if [ "$BU_ZAP_ACTIVE" != "true" ]; then
      __echo 0 "E: No zap operation since $BU_BASE/$BU_CONF has BU_ZAP_ACTIVE='$BU_ZAP_ACTIVE'"
      exit 1
  fi
  if [ -z "$BTRFS_BASE" ]; then
    __echo 0 "E: no Btrfs found to work on"
    exit 1
  fi
  case "$1" in
    half) # half
      __echo 1 "I: zap snapshots into half at $BTRFS_BASE .  It's aging status --"
      __analyze
      __echo 1 "I: Are you sure ? -----------------------------------------------"
      YN=''
      while [ -z "$YN" ]; do
        # shellcheck disable=SC2039
        read -p "> Please type 'Yes' to confirm: " -r YN
      done
      if [ "$YN" != "Yes" ]; then
        exit 1
      fi
      # shellcheck disable=SC2046
      set -- $(__list)
      BU_INDEX_MAX="${#}"        # items
      BU_INDEX="$BU_INDEX_MAX"  # count down
      BU_INDEX_MIN="$(((BU_INDEX+1)/2))"
      __echo 3 "D: keep recent $BU_INDEX_MIN snapshots out of $BU_INDEX_MAX snapshots"
      for d in "${@}"; do
        # 1 2 3 4 5 6 7 8 ${#}
        # 1 1 2 2 3 3 4 4 stop at
        if [ "$BU_INDEX" -le "$BU_INDEX_MIN" ]; then
          break
        fi
        BU_INDEX=$((BU_INDEX-1))
        __eval "$BSV delete '$BTRFS_BASE/$BU_DIR/$d'"
      done
      ;;
    new*) # newest
      __echo 3 "D: zap newest snapshots at $BTRFS_BASE"
      # shellcheck disable=SC2046
      set -- $(__list| sort -r)
      d=$1
      __eval "$BSV delete '$BTRFS_BASE/$BU_DIR/$d'"
      ;;
    old*) # oldest
      __echo 1 "I: zap oldest snapshots at $BTRFS_BASE .  It's aging status --"
      __analyze
      __echo 1 "I: Are you sure ? --------------------------------------------"
      YN=''
      while [ -z "$YN" ]; do
        # shellcheck disable=SC2039
        read -p "> Please type 'Yes' to confirm: " -r YN
      done
      if [ "$YN" != "Yes" ]; then
        exit 1
      fi
      # shellcheck disable=SC2046
      set -- $(__list)
      d=$1
      __eval "$BSV delete '$BTRFS_BASE/$BU_DIR/$d'"
      ;;
    *) # labels (local only now)
      __echo 3 "D: zap snapshots at $BTRFS_BASE"
      for d in "${@}"; do
        if [ -e "$BTRFS_BASE/$BU_DIR/$d" ]; then
          __eval "$BSV delete '$BTRFS_BASE/$BU_DIR/$d'"
        else
          __echo 1 "W: missing zap snapshot of $BTRFS_BASE @ $d"
        fi
      done
      ;;
  esac
}

##############################################################################
# @brief             make template BU_CONF and BU_FLTR at BTRFS_BASE or $(pwd)
# @call              __find_base, __is_btrfs_mount_point
# @create            BU_CONF BU_FLTR files at newly calculated BU_BASE
##############################################################################
__template () {
  # works for --local or --source
  BU_MODE="${BU_MODE:-local}"
  if [ "$BU_MODE" = "local" ]; then # local Btrfs aging config (no rsync)
    __find_base "$1"
    if [ -z "$BTRFS_BASE" ]; then
      # not in Btrfs
      __echo 0 "E: not in Btrfs -> no snapshot"
      __echo 0 "E: if you are thinking to use rsync to use remote Btrfs, use --remote option"
      exit 1
    fi
    # now BTRFS_BASE exists
    RSYNC_SRC="$BTRFS_BASE"
    RSYNC_DST="$BTRFS_BASE"
    BU_BASE="$BTRFS_BASE"
    RSYNC_HOST=""
  elif [ "$BU_MODE" = "remote" ]; then # rsync source side execution
    RSYNC_DST="$1"
    while [ -z "$RSYNC_DST" ]; do
      # shellcheck disable=SC2039
      read -p "> rsync destination path: " -r RSYNC_DST
    done
    if [ "${RSYNC_DST#*:}" != "$RSYNC_DST" ]; then
      RSYNC_HOST=${RSYNC_DST%%:*}
      RSYNC_DST=${RSYNC_DST#*:}
      __echo 1 "I: remote host='$BU_HOST' used with its base dir='$RSYNC_DST'"
      # XXX FIXME XXX not yet properly addressed remote host for rsync
      __echo 1 "W: Not implemented ..."
    else
      RSYNC_DST="$(realpath "${RSYNC_DST:-.}")"
      RSYNC_HOST=""
    fi
    BU_BASE="$(realpath "${2:-.}")"
    RSYNC_SRC="$BU_BASE"
    if ! __is_btrfs_mount_point "$RSYNC_DST"; then
      __echo 1 "W: $RSYNC_DST not in Btrfs -> no 'btrfs subvolume snapshot ...', just 'rsync' only..."
    fi
  else # rsync destination side execution
    __echo 0 "E: template generation with odd BU_MODE=\"$BU_MODE\"."
    exit 1
  fi
  ############################################################################
  if [ -e "$BU_BASE/$BU_CONF" ]; then
    __echo 0 "E: configuration file already exists: $BU_BASE/$BU_CONF"
    exit 1
  elif [ -e "$BU_BASE/$BU_FLTR" ] ; then
    __echo 0 "E: configuration file already exists: $BU_BASE/$BU_FLTR"
    exit 1
  fi
  ############################################################################
  #
  # conf template
  #
  ############################################################################
  __echo 2 "I: make template $BU_BASE/$BU_CONF file"
  eval "$SUSH 'cat > \"$BU_BASE/$BU_CONF\" <<END_OF_TEMPLATE
# $BU configuration (Btrfs)

# This configuration file as generated by the \"template\" command can be
# modified to address both local Btrfs snapshot and remote Btrfs snapshot of
# backup image generated by rsync.

# aging speed variables
BU_INDEX_MIN=\"$BU_MIN\" # keep minimum recent $BU_MIN items
BU_AGE_SHRT=\"\\\$(($BU_SHRT))\" # short age
BU_AGE_LONG=\"\\\$(($BU_LONG))\" # long age
BU_AGE_STEP=\"$BU_STEP\" # $BU_STEP% step for mid range aging

# aged data: keep or forget
# AGE_MODE=\"keep\" # for keeping old data forever
# AGE_MODE=\"forget\" # for erasing really old data
AGE_MODE=\"keep\" # safer initial setting

# rsync source and destination for rsync and backup commands and
# commands started with --remote option
# for --local operation, these are ignored
RSYNC_SRC=\"$RSYNC_SRC\" # *** may be on non-Btrfs ***
RSYNC_DST=\"$RSYNC_DST\" # *** must be on Btrfs to make Btrfs snapshot ***
RSYNC_HOST=\"$RSYNC_HOST\" # *** rsync source host name (FIXME)
# You can add custom filtering for rsync using ./\"$BU_FLTR\"

# safety (change this if you want to disable some zap operations)
BU_ZAP_ACTIVE=\"true\"

END_OF_TEMPLATE'"

  # make this editable without sudo
  __eval "$SUSH 'chown $UID:$UID \"$BU_BASE/$BU_CONF\"'"
  ############################################################################
  #
  # filter template
  #
  ############################################################################
  __echo 2 "I: make template $BU_BASE/$BU_FLTR file"
  eval "$SUSH  'cat > \"$BU_BASE/$BU_FLTR\" <<END_OF_TEMPLATE
# $BU configuration (rsync)
#
# Example (for making small user home)
#
# + /.gnupg/***
# + /.ssh/***
# + /.bash_aliases
# + /.bash_logout
# + /.bashrc
# + /.devscripts
# + /.gbp.conf
# + /.gitconfig
# + /.pbuilderrc
# + /.profile
# + /.reportbugrc
# + /.config/
# + /.config/evolution/
# + /.config/evolution/mail/
# + /.config/evolution/mail/filters.xml
# + /.config/evolution/sources/***
# - *
#
# See more at rsync(1) manpage for \"FILTER RULES\"
END_OF_TEMPLATE'"
  # make this editable without sudo
  __eval "$SUSH 'chown $UID:$UID $RSYNC_SRC/$BU_FLTR'"
}


##############################################################################
# Parse Command Line
##############################################################################
# The quotes around "$@" are essential!
# We need TEMP as the 'eval set --' would nuke the return value of getopt.
TEMP=$(getopt -o 'lri:c:nqvh' -n "${BU}" \
  --long 'local,remote,id:,config:,noop,quiet,verbose,debug' -- "$@")
# Note the quotes around "$TEMP": they are essential!
#echo "DEBUG: ***** TEMP='$TEMP'"
eval set -- "$TEMP"
unset TEMP
# if $BU = ${0##*/} start with "r" --> BU_MODE="remote"
case $BU in
  r*) BU_MODE="remote"
    BU_MES_L="... not available (since $BU starts with 'r')"
    BU_MES_R="remote mode (default)"
    ;;
  *) BU_MODE=""
    BU_MES_L="local mode (default: working data on Btrfs)"
    BU_MES_R="remote mode (default: working data not on Btrfs)"
    ;;
esac
# OPTIONS
while [ -n "$1" ]; do
	case "$1" in
		-l|--local)
      BU_MODE="local"
      __set_bu_mode "local" "set as -l or --local"
		  ;;
		-r|--remote)
      BU_MODE="remote"
      __set_bu_mode "remote" "set as -r or --remote"
		  ;;
		-i|--id)
			shift
      BU_ID="$1"
		  ;;
		-c|--config)
			shift
      BU_STEM="$1"
      ;;
    -n|--noop)
      SUSH="echo ___ $SUSH"
      BSV="echo ___ $BSV"
      RSYNC="echo ___ $RSYNC"
      ;;
		-q|--quiet)
      VERBOSE_LEVEL=0
      ;;
		-v|--verbose)
      VERBOSE_LEVEL=$((VERBOSE_LEVEL+1))
      ;;
		-h|--help)
      __help
      exit 0
      ;;
		'--')
      shift
      break
		;;
		-*)
			echo "E: Unknown option: '$1'" >&2
      __help
			exit 1
		;;
		*)
      break
		;;
	esac
	shift
done
# derivative parameters
BU_CONF="$BU_STEM.$EXT_CONF"
BU_FLTR="$BU_STEM.$EXT_FLTR"
##############################################################################
__echo 3 "D: NOOP          = '$NOOP'"
__echo 3 "D: BU_MODE       = '$BU_MODE'"
__echo 3 "D: BU_STEM       = '$BU_STEM'"
__echo 3 "D: BU_ID         = '$BU_ID'"
__echo 3 "D: VERBOSE_LEVEL = '$VERBOSE_LEVEL'"
if [ "$VERBOSE_LEVEL" -ge 4 ]; then
  set -x
fi
#############################################################################
# Command (any commands starting with "r" set BU_MODE="remote")
#############################################################################
case "$1" in
  s*) #snapshot
    __load_config "$2"
    __snapshot
    ;;
  rs*) # -r snap
    __set_bu_mode "remote" "command=rs*"
    __load_config "$2"
    __snapshot
    ;;
  l*) # list
    __load_config "$2"
    __list
    ;;
  rl*) # -r list
    __set_bu_mode "remote" "command=rl*"
    __load_config "$2"
    __list
    ;;
  a*) # analyze
    __load_config "$2"
    __analyze
    ;;
  ra*) # -r analyze
    __set_bu_mode "remote" "command=ra*"
    __load_config "$2"
    __analyze
    ;;
  p*) # prune
    __load_config "$2"
    __prune
    ;;
  rp*) # -r prune
    __set_bu_mode "remote" "command=rp*"
    __load_config "$2"
    __prune
    ;;
  zap) # zap
    __load_config "$2"
    shift 2
    __zap "$@"
    ;;
  rzap) # zap
    __set_bu_mode "remote" "command=rzap"
    __load_config "$2"
    shift 2
    __zap "$@"
    ;;
  t*) # template
    __template "$2"
    ;;
  rt*) # -r template
    __set_bu_mode "remote" "command=rt*"
    __template "$2"
    ;;
  r*) # rsync (only rsync, no Btrfs-snapshot)
    __set_bu_mode "remote" "command=r*"
    __load_config "$2"
    __rsync
    ;;
  h*|'') # help
    __help
    exit 0
    ;;
  *) # unknown
    echo "E: Unknown command: '$1'" >&2
    __help
    exit 1
    ;;
esac
