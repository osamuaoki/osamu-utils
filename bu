#!/bin/sh -e
## @brief backup with "rsync" and "btrfs subvolume snapshot"
# vim:set ai si sts=2 sw=2 et:
##############################################################################
# Copyright 2020 (C) Osamu Aoki <osamu@debian.org>
# License: GPL 2+
##############################################################################

__help () {
cat << END_OF_HELP
NAME
  $BU -- backup with "rsync" and "btrfs subvolume snapshot"

SYNOPSIS
  $BU [OPTIONS] [COMMAND [ARG(s)]]

DESCRIPTION
  $BU is a "rsync" and "btrfs subvolume snapshot" command wrapper to help
  make and manage data backups using the standard data format with the
  intuitive data history representation.

  "remote mode" operation:

  1. "rsync" copies data from the actively used working data on a storage
     device on the source host to a separate storage device formatted with
     Btrfs on the same or different destination host.  This improves robustness
     of the stored data against device failures.  (All HDD/SSD will die at some
     point in future.)
  2. "btrfs subvolume snapshot" creates readonly snapshots of the copied data
     with ISO 8601 time stamps, e.g. '2020-09-02T11:51:50+00:00' as the file
     path under the "$BU_DIR/" directory.

  "local mode" operation:

  1. "btrfs subvolume snapshot" creates readonly snapshots of the working
     data on a storage device formatted in Btrfs with ISO 8601 time stamps,
     e.g. '2020-09-02T11:51:50+00:00' as the file path under the "$BU_DIR/"
     directory.

OPTIONS:
  -l,--local    $BU_MES_L
  -r,--remote   $BU_MES_R
  -i,--id ID    use ID for the snapshot name instead of the time stamp
  -c,--conf RC  use RC.$EXT_CONF and RC.$EXT_FLTR instead of their default
                $BU_CONF0 and $BU_FLTR0
  -n,--noop     No file nor filesystem modification by prepending pertinent
                internal commands with "echo __"
  -q,--quiet    quiet (no progress message, just error message)
  -v,--verbose  verbose
  -vv           very verbose for debug
  -vvv          very very verbose for debug
  -x            trace on

SUBCOMMAND: (may be shortened)
  snapshot  make a sanpshot under "$BU_DIR/" as <ISO_8601_date>
  list      list ISO 8601 time stamps of all snapshots
  analyze   analyze the aging status of all snapshots
  prune     prune snapshots based on the aging status
  zap       zap (=erase) particular snapshots specified by ARGs.
            "zap" is required to be typed in full text.
  template  make template files named after the command name:
              $BU_CONF0 (used for both local and remote modes)
              $BU_FLTR0 (used only for the remote mode)
  rsync     copy data from local data to remote data using "rsync" with
            $BU_FLTR0 (no Btrfs operation)
  btrfs     list accessible Btrfs mount points

ARGs:
  Most SUBCOMMANDs take a single ARG specifying the data source PATH.  If ARG
  is omitted, the current directory (".") is assumed.  $BU makes reasonable
  efforts to reduce PATH to the root of the mounted Btrfs or to the directory
  where $BU_CONF0 is found.  You can lazily issue $BU command anywhere on your
  working data directory tree or your backup data directory tree.

  One exception is "$BU template [<DIR_DST>]".   Here, <DIR_DST> specifies the
  rsync destination which may be on Btrfs.  For more complicated configuration
  involving multiple hosts, please edit generated $BU_CONF0.  If you are on a
  private LAN and use the multicast DNS (mDNS), e.g.,  under the typical Debian
  desktop system with the task-desktop package installed, use "local" for the
  domain name part.

  Another exception is "$BU zap ARG_1 ARG_2".  Here, ARG_1 is mandatory PATH
  (usually ".") and ARG_2 is the target specifier which can be:
    new:        zap the newest snapshots
    old:        zap the oldest snapshots
    half:       zap the older half of snapshots
    <PATH ...>  zap snapshots specified: "btrfs subvolume delete <PATH ...>"

CONFIGURATION FILES
  $BU_CONF0 and $BU_FLTR0 defines aging behavior of readonly Btrfs sanpshots
  and copying behavior of rsync.  For local mode, SRC_* and DST_* are ignored.

HINT
  You can start this $BU program under different \$0 value by creating symlinks
  and using them to start this.  If \$0 starts with "r" or "s", "-r" option is
  automatically set.  Otherwise, you can set "-l" option if the data source
  PATH is on Btrfs.  I suggest using "bu" for backup on the local Btrfs device,
  "rbu" for backup on the remote Btrfs device of the same host and "sbu" for
  backup on the Btrfs device of the securely connected remote host as good
  choices for \$0 if these names are not already used by others.  Default
  configuration file names match with \$0.

CAVEAT:
  Currently, this $BU is designed and used mostly for cases where the source
  and destination of rsync are on the same host.  If you find error under
  multiple host configuration, please let me know.  It should work for remote
  host cases.

  The user who executes this command must be a member of "sudo".

Copyright 2020 Osamu Aoki <osamu@debian.org>, GPL 2+
END_OF_HELP
}

#############################################################################
# Constants
#############################################################################
BU="${0##*/}"
VERBOSE_LEVEL=1
BU_ID=""
BU_DIR=".snap"
EXT_CONF="conf"
EXT_FLTR="fltr"
BU_STEM=".$BU"
BU_CONF0="$BU_STEM.$EXT_CONF"
BU_FLTR0="$BU_STEM.$EXT_FLTR"
NOW_TS=$(date -u --iso=second) # time stamp
NOW_EP=$(date +%s -d"$NOW_TS") # unix epoch
BU_MIN="3"             # aging keep initial minimum items
BU_SHRT="24*60*60"     # aging short threashold 1 day
BU_LONG="365*24*60*60" # aging long  threashold 1 year
BU_STEP="10"           # aging step %
NOOP=""
SETX_ON=""
SETX_OFF=""
SUSH="sudo dash"
BSV="btrfs subvolume"
# Set login name as needed
SSH_SRC="ssh"
SSH_DST="ssh"
SSH_SRC_OPTS=""
SSH_DST_OPTS=""
THIS_HOST="$(hostname)"
THIS_DOM="local"

#############################################################################
# RSYNC Constants
##############################################################################
#
#   https://www.sanitarium.net/golug/rsync+btrfs_backups_2011.html
#     rsync --archive --one-file-system --hard-links --inplace --numeric-ids \
#       --delete --delete-excluded --exclude-from=excludefile host:/src/ /dest/
#
#   https://wiki.debian.org/Btrfs
#
# rsync command and options
#     -a --archive     == -rlptgoD
#     -H --hard-links
#     (-A --acls)
#     (-X --xattrs)
#     -x --one-file-system
#     --inplace
#     --delete-during
#
# Please note --delete-excluded can't be used to avoid trying to remove
# mount points used by other submodules
RSYNC="rsync"
RSYNC_OPTS="-aHx --inplace --delete-during --numeric-ids"
#############################################################################
# System Functions (trap and echo)
##############################################################################
# fd=9 not used elsewhere in this script.
exec 9< "$0"
if ! flock --nonblock 9 ; then
  __echo 0 "$BU already running.  Try later" >&2
  exit 2
fi
# traps
__term_exit () {
  __echo 0 "E: Process externally interrupted.  Terminating."
  exit 1
}
trap '__term_exit' HUP INT QUIT TERM
# dash: EXIT (but no ERR)
__err_exit () {
  __echo 0 "E: Internal process returned an error exit.  Terminating."
  exit 1
}
__exit_exit () {
  exit 0
}
trap '[ $? -eq 0 ] && __exit_exit || __err_exit' EXIT

# echo with verbose level, 0 through 3
VERBOSE_LEVEL="1"
# 0 E:   Quiet     Print fatal errors only                       (-q)
# 1 W/I: Default   Print errors and warnings only                (normal)
# 2 W/I: Verbose   Show equivalent shell commands being executed (-v)
# 3 D:   Debug     Everything                                    (-vv)
__echo () {
  $SETX_OFF
  if [ "$VERBOSE_LEVEL" -ge "$1" ]; then
    shift
    echo "$*" >&2
  fi
  $SETX_ON
}

##############################################################################
# Internal Functions
##############################################################################
# This shell script involves root operation on 3 hosts:
#   THIS_HOST: This is where configuration is read from      (via __shell_root as root)
#   SRC_HOST:  This is where data are originally generated   (via __shell_sec as root)
#   DST_HOST:  This is where data are backed up              (via __shell_dst as root)

__shell_root () {
  # shellcheck disable=SC2086
  $SUSH
}

__shell_src () {
  if [ "$SRC_HOST.$SRC_DOM" = "$THIS_HOST.$THIS_DOM" ]; then
    # shellcheck disable=SC2086
    $SUSH
  else
    # shellcheck disable=SC2086
    $SSH_SRC $SSH_SRC_OPTS "$SRC_HOST.$SRC_DOM" $SUSH
  fi
}

__shell_dst () {
  if [ "$DST_HOST.$DST_DOM" = "$THIS_HOST.$THIS_DOM" ]; then
    # shellcheck disable=SC2086
    $SUSH
  else
    # shellcheck disable=SC2086
    $SSH_DST $SSH_DST_OPTS "$DST_HOST.$DST_DOM" $SUSH
  fi
}

##############################################################################
# @brief             convert $1 in seconds to day.hh:mm:ss string
# @arg   $1          seconds
# @echo              "day.hh:mm:ss" string
##############################################################################
age_string () {
  # @ $1 second
  SEC="$1"
  MIN=$((SEC/60))
  SEC=$((SEC%60))
  HR=$((MIN/60))
  MIN=$((MIN%60))
  DAY=$((HR/24))
  HR=$((HR%24))
  printf "%2i.%02i:%02i:%02i" "$DAY" "$HR" "$MIN" "$SEC"
}

##############################################################################
# @brief             set $BU_MODE by $1
# @arg   $1          value to set to $BU_MODE
# @set   $BU_MODE    Backup mode: 'local' or 'remote'
# @err               print error message with $2 and exit
##############################################################################
__set_bu_mode () {
  BU_MODE="${BU_MODE:-$1}"
  if  [ "$BU_MODE" != "$1" ]; then
    __echo 0 "E: Can't change BU_MODE from '$BU_MODE' to '$1' ($2)"
    exit 1
  fi
}


##############################################################################
# @brief             load config and sanitize it
# @arg   $1          path to the directory to work from (default='.')
# @set   SRC_DIR     base of rsync source               (read from $BU_CONF)
# @set   DST_DIR     base of rsync destination          (read from $BU_CONF)
# @set   BU_*        all Btrfs aging related parameters
##############################################################################
# This is basically executed from this host
__load_config () {
##############################################################################
# find base
##############################################################################
  d=$(realpath "${1:-.}")
  d0="$d"
  BTRFS_BASE=""
  BU_BASE=""
  while true; do
    if [ "$(stat -f -c %T "$d")" = "btrfs" ] && [ "$(stat -c %i "$d")" = "256" ]; then
      BTRFS_BASE="$d"
      if [ -f "$d/$BU_CONF" ]; then
        BU_BASE="$d"
      fi
      break
    elif [ -f "$d/$BU_CONF" ]; then
      BU_BASE="$d"
      break
    fi
    if [ "$d" = "/" ]; then
      break
    fi
    d=$(realpath "$d/..")
  done
  #echo "BTRFS_BASE='$BTRFS_BASE'"
  #echo "BU_BASE='$BU_BASE'"
  # sanity check
  if [ -z "$BTRFS_BASE" ] && [ -z "$BU_BASE" ]; then
    __echo 0 "E: Can't find Btrfs nor $BU_CONF for $d0"
    exit 1
  fi
##############################################################################
# sanity check for BU_BASE and BTRFS_BASE and default value for BU_MODE
##############################################################################
  if [ -z "$BTRFS_BASE" ]; then
    # not on Btrfs
    __set_bu_mode "remote" "fall-back for no local Btrfs"
  else
    # on Btrfs
    BU_MODE="${BU_MODE:-local}"
  fi
  __echo 3 "D: BU_MODE       = '$BU_MODE' (finalized in __load_config)"
  # sanity check
  if [ "$BU_MODE" = "local" ]; then
    if [ -z "$BTRFS_BASE" ]; then
      __echo 0 "E: need $BU_BASE to be Btrfs for mode=$BU_MODE operation"
      exit 1
    fi
  else # "$BU_MODE" = "remote"
    if [ -z "$BU_BASE" ] ; then
      __echo 0 "E: need $BU_BASE/$BU_CONF for mode=$BU_MODE operation"
      exit 1
    fi
  fi
  __echo 2 "I: Before loading parameters: mode='$BU_MODE', BTRFS_BASE='$BTRFS_BASE', BU_BASE='$BU_BASE'"
##############################################################################
# load parameters
##############################################################################
  if [ -n "$BU_BASE" ]; then
    __echo 2 "I: found $BU_BASE/$BU_CONF for mode=$BU_MODE operation"
    # shellcheck disable=SC1090
    . "$BU_BASE/$BU_CONF"
    __echo 2 "I: sourced $BU_BASE/$BU_CONF as mode=$BU_MODE"
  fi
##############################################################################
# sanity chack
##############################################################################
  if [ "$BU_MODE" = "local" ]; then
    # For local mode, ignore hostname, domainname, and directory
    SRC_HOST="$THIS_HOST"
    SRC_DOM="local"
    SRC_DIR="$BTRFS_BASE"
    DST_HOST="$THIS_HOST"
    DST_DOM="local"
    DST_DIR="$BTRFS_BASE"
    DST_RSYNC="$DST_DIR"
  else # "$BU_MODE" = "remote"
    # set default values if it was missing
    SRC_HOST="${SRC_HOST:-$THIS_HOST}"
    SRC_DOM="${SRC_DOM:-local}"
    SRC_DIR="${SRC_DIR:-$BU_BASE}"
    DST_HOST="${DST_HOST:-$THIS_HOST}"
    DST_DOM="${DST_DOM:-local}"
    DST_DIR="${DST_DIR:-$BU_BASE}"
    # For remote mode, sanity check and reclassify in detail
    if [ "$THIS_HOST" = "$SRC_HOST" ] && [ "$THIS_HOST" = "$DST_HOST" ]; then
      # single source and destination host cases
      if [ "$SRC_DIR" = "$DST_DIR" ]; then
        __echo 0 "E: SRC_DIR='$SRC_DIR' and DST_DIR='$DST_DIR' are the same in $BU_BASE/$BU_CONF for mode=$BU_MODE."
        exit 1
      fi
      if [ "$SRC_DIR" != "$BU_BASE" ] &&  [ "$DST_DIR" != "$BU_BASE" ]; then
      __echo 0 "E: One of SRC_DIR='$SRC_DIR' and DST_DIR='$DST_DIR' must match in BU_BASE='$BU_BASE' for mode=$BU_MODE."
        exit 1
      fi
      DST_RSYNC="$DST_DIR"
    elif [ "$THIS_HOST" = "$SRC_HOST" ] || [ "$THIS_HOST" = "$DST_HOST" ]; then
      # different source and destination host cases
      DST_RSYNC="$DST_HOST.$DST_DOM:$DST_DIR"
    else
      # [ "$THIS_HOST" != "$SRC_HOST" ] && [ "$THIS_HOST" != "$DST_HOST" ] && [ "$SRC_HOST" != "$DST_HOST" ]
      __echo 0 "E: THIS_HOST='$THIS_HOST' but SRC_HOST='$SRC_HOST' and DST_HOST='$DST_HOST' in $BU_BASE/$BU_CONF for mode=$BU_MODE."
      exit 1
    fi
  fi
  # sanity check for aging parameters
  BU_INDEX_MIN="${BU_INDEX_MIN:-$BU_MIN}" # items min.
  if [ "$BU_INDEX_MIN" -lt "0" ]; then
    BU_INDEX_MIN="0"
  fi
  # odd but dash needs $ here
  # shellcheck disable=SC2004
  BU_AGE_SHRT="${BU_AGE_SHRT:-$(($BU_SHRT))}" # short age
  # odd but dash needs $ here
  # shellcheck disable=SC2004
  BU_AGE_LONG="${BU_AGE_LONG:-$(($BU_LONG))}" # long age
  if [ "$BU_AGE_SHRT" -lt "60" ]; then
    BU_AGE_SHRT=60
  fi
  if [ "$BU_AGE_LONG" -lt "$BU_AGE_SHRT" ]; then
    BU_AGE_LONG="$BU_AGE_SHRT"
  fi
  BU_AGE_STEP="${BU_AGE_STEP:-10}" # 10% reduced geometric gap for mid range aging
  if [ "$BU_AGE_STEP" -lt "2" ]; then
    BU_AGE_STEP=2
  elif [ "$BU_AGE_STEP" -gt "50" ]; then
    BU_AGE_STEP=50
  fi
  # "forget" for erasing really old data > BU_AGE_LONG for aging
  if [ "$AGE_MODE" != "forget" ]; then
    AGE_MODE="keep" # this is default
  fi
  # result of loading
  __echo 3 "D: VERBOSE_LEVEL = '$VERBOSE_LEVEL'"
  __echo 3 "D: BU_INDEX_MIN  = '$BU_INDEX_MIN'"
  __echo 3 "D: BU_AGE_SHRT   = '$BU_AGE_SHRT' = $(age_string "$BU_AGE_SHRT")"
  __echo 3 "D: BU_AGE_LONG   = '$BU_AGE_LONG' = $(age_string "$BU_AGE_LONG")"
  __echo 3 "D: BU_AGE_STEP   = '$BU_AGE_STEP'%"
  __echo 3 "D: AGE_MODE      = '$AGE_MODE'"
  __echo 3 "D: BU_MODE       = '$BU_MODE'"
  __echo 3 "D: THIS_HOST     = '$THIS_HOST'"
  __echo 3 "D: BU_BASE       = '$BU_BASE'"
  __echo 3 "D: SRC_DIR       = '$SRC_DIR'"
  __echo 3 "D: BU_DIR        = '$BU_DIR'"
  __echo 3 "D: DST_HOST      = '$DST_HOST'"
  __echo 3 "D: DST_DOM       = '$DST_DOM'"
  __echo 3 "D: DST_DIR       = '$DST_DIR'"
  __echo 3 "D: DST_RSYNC     = '$DST_RSYNC'"
}

##############################################################################
# @brief             rsync using BU_FLTR filter
# @read  SRC_DIR     rsync source set by __load_config
# @read  DST_RSYNC   rsync destination set by __load_config
# @read  BU_FLTR     rsync filter configuration file name
##############################################################################
# This is basically executed from the source host
__rsync () {
  __echo 2 "I: rsync SRC:'$SRC' -> DST:'$DST'"
  # adjust rsync options
  RSYNC="$RSYNC $RSYNC_OPTS"
  if [ "$VERBOSE_LEVEL" -eq "1" ]; then
    RSYNC="$RSYNC --progress"
  elif [ "$VERBOSE_LEVEL" -eq "2" ]; then
    RSYNC="$RSYNC -v"
  elif [ "$VERBOSE_LEVEL" -eq "3" ]; then
    RSYNC="$RSYNC -vv"
  elif [ "$VERBOSE_LEVEL" -ge "4" ]; then
    RSYNC="$RSYNC -vvv"
  fi
  # protect snapshot mount directory
  RSYNC="$RSYNC --filter '- /$BU_DIR/'"
  if [ "$THIS_HOST" = "$DST_HOST" ] && [ "$BU_BASE" = "$DST_DIR" ]; then
    # execute CMD lines after substitutions (to copy configuration to source host)
    { cat << EOCMD
$SETX_ON
$NOOP $RSYNC '$DST_RSYNC/$BU_CONF' '$DST_RSYNC/$BU_FLTR' '$SRC_DIR/'
EOCMD
    } | __shell_src
  fi
  # ensure copying configurations used to destination host
  RSYNC="$RSYNC --filter '+ /$BU_CONF'"
  RSYNC="$RSYNC --filter '+ /$BU_FLTR'"
  # load user provided filter if exists
  if [ -e "$SRC_DIR/$BU_FLTR" ]; then
    RSYNC="$RSYNC --filter '. $SRC_DIR/$BU_FLTR'"
  fi
  # copy everything is default
  RSYNC="$RSYNC --filter '+ *'"
  echo ">>> RSYNC: $RSYNC"
  # execute CMD lines after substitutions
  { cat << EOCMD
$SETX_ON
$NOOP $RSYNC '$SRC_DIR/' '$DST_RSYNC/'
EOCMD
  } | __shell_src
}

##############################################################################
# @brief             make snapshot (after rsync )
# @read  DST_DIR     base of snapshot in destination host
# @read  BU_ID       snapshot id to use (normally '')
# @read  NOW_TS      time stamp
##############################################################################
__snapshot () {
  # This is basically executed from the source host
  if [ "$SRC_HOST" != "$DST_HOST" ] || [ "$SRC_DIR" != "$DST_DIR" ]; then
    __rsync
  fi
  # This is basically executed from the destination host
  {
    # variable substitution
    cat << EOCMD
$SETX_ON
DST_DIR="$DST_DIR"
BU_DIR="$BU_DIR"
BU_ID="$BU_ID"
NOW_TS="$NOW_TS"
NOOP="$NOOP"
BSV="$BSV"
EOCMD
    # No variable substitution
    cat << 'EOCMD'
if [ "$(stat -f -c %T "$DST_DIR")" = "btrfs" ] && [ "$(stat -c %i "$DST_DIR")" = "256" ]; then
  if [ -z "$BU_ID" ]; then
    mkdir -p "$DST_DIR/$BU_DIR" >/dev/null
    while [ -d "$DST_DIR/$BU_DIR/$NOW_TS" ]; do
      sleep "1s"
      NOW_TS=$(date -u --iso=second)
    done
    BU_ID="$NOW_TS"
  fi
  $NOOP $BSV snapshot -r "$DST_DIR" "$DST_DIR/$BU_DIR/$BU_ID"
else
  echo "E: No 'snapshot' since no Btrfs found at DST_DIR='$DST_DIR'" >&2
  exit 1
fi
EOCMD
  } | __shell_dst
}

##############################################################################
# @brief             list snapshot time stamp of Btrfs (old->new order)
# @read  DST_DIR     base of snapshot in destination host
# @echo              snapshot time stamps
##############################################################################
__list () {
  __echo 3 "D: list readonly snapshots in $DST_DIR/$BU_DIR"
  # This is basically executed from the destination host
  {
    # variable substitution
    cat << EOCMD
$SETX_ON
DST_DIR="$DST_DIR"
BU_DIR="$BU_DIR"
EOCMD
    # No variable substitution
    cat << 'EOCMD'
if [ "$(stat -f -c %T "$DST_DIR")" = "btrfs" ] && [ "$(stat -c %i "$DST_DIR")" = "256" ]; then
  cd "$DST_DIR/$BU_DIR" >/dev/null
  # shellcheck disable=SC2010
  { ls -1d -- * 2>/dev/null || true ; }| grep -E \
      '^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[-+]00:00$' || true
else
  echo "E: No 'list' since no Btrfs found at DST_DIR='$DST_DIR'" >&2
  exit 1
fi
EOCMD
  } | __shell_dst
}

##############################################################################
# @brief             aging analysis of time stamps of Btrfs
# @call              __list
# @read  BTRFS_BASE  base of Btrfs set by __load_config
# @read  BU_*        all Btrfs aging related parameters set by __load_config
# @echo              snapshot time stamps with + or - prepended
##############################################################################
__analyze () {
  __echo 3 "D: analyzing readonly snapshots for $DST_DIR"
  # This is basically executed from the destination host
  {
    # variable substitution
    cat << EOCMD
SETX_ON="$SETX_ON"
SETX_OFF="$SETX_OFF"
$SETX_ON
VERBOSE_LEVEL="$VERBOSE_LEVEL"
BU_INDEX_MIN="$BU_INDEX_MIN"
BU_AGE_SHRT="$BU_AGE_SHRT"
BU_AGE_LONG="$BU_AGE_LONG"
BU_AGE_STEP="$BU_AGE_STEP"
AGE_MODE="$AGE_MODE"
BU_MODE="$BU_MODE"
THIS_HOST="$THIS_HOST"
BU_BASE="$BU_BASE"
SRC_DIR="$SRC_DIR"
BU_DIR="$BU_DIR"
DST_HOST="$DST_HOST"
DST_DOM="$DST_DOM"
DST_DIR="$DST_DIR"
DST_RSYNC="$DST_RSYNC"
NOW_EP="$NOW_EP"
ID_LIST="$(__list)"
EOCMD
    # No variable substitution
    cat << 'EOCMD'
# shellcheck disable=SC2046
set -- $ID_LIST
##############################################################################
# helper functions for remote shell
##############################################################################
age_string () {
  # @ $1 second
  SEC="$1"
  MIN=$((SEC/60))
  SEC=$((SEC%60))
  HR=$((MIN/60))
  MIN=$((MIN%60))
  DAY=$((HR/24))
  HR=$((HR%24))
  printf "%2i.%02i:%02i:%02i" "$DAY" "$HR" "$MIN" "$SEC"
}
__echo () {
  $SETX_OFF
  if [ "$VERBOSE_LEVEL" -ge "$1" ]; then
    shift
    echo "$*" >&2
  fi
  $SETX_ON
}
##############################################################################
# Main routine
##############################################################################
BU_INDEX="${#}" # newest=1, n items
BU_INDEX_ORIG="$BU_INDEX"
if [ "$BU_INDEX" -le "0" ]; then
  __echo 1 "I: No snapshot available yet"
  exit 0
fi
BU_AGE_DEL_MAX=$((BU_AGE_LONG*BU_AGE_STEP/100))
# oldest snapshot
BU_TS="$1"
__echo 3 "D: ts = $BU_TS, i = $BU_INDEX out of $BU_INDEX_ORIG snapshots (initial)"
BU_EP=$(date '+%s' -d"$BU_TS")
__echo 3 "D: ts = $BU_TS, age_del_max = $(age_string $BU_AGE_DEL_MAX) = $BU_AGE_STEP% of AGE_LONG (initial)"
BU_AGE=$((NOW_EP-BU_EP))
if [ "$AGE_MODE" = "forget" ]; then
  if [ "$BU_AGE" -le "$BU_AGE_LONG" ] || \
     [ "$BU_INDEX" -le "$BU_INDEX_MIN" ]; then
    __echo 2 "I: ts = $BU_TS, age:$(age_string "$BU_AGE") <= age_long:$(age_string "$BU_AGE_LONG") or  i:$BU_INDEX <= min:$BU_INDEX_MIN (oldest but not so old or not enough snapshots - keep)"
    echo "+$BU_TS"
  else
    __echo 2 "I: ts = $BU_TS, age:$(age_string "$BU_AGE") >  age_long:$(age_string "$BU_AGE_LONG") and i:$BU_INDEX >  min:$BU_INDEX_MIN (oldest - forget)"
    echo "-$BU_TS"
  fi
else
  __echo 2 "I: ts = $BU_TS, age:$(age_string "$BU_AGE") (oldest - keep)"
  echo "+$BU_TS"
fi
# loop over second oldest snapshot and newer (n-1 items)
shift
__echo 3 "D: ts = $BU_TS, age_last    = $(age_string $BU_AGE) (initial)"
BU_AGE_LAST="$BU_AGE"
for BU_TS in "${@}"; do
  BU_INDEX=$((BU_INDEX-1))
  BU_EP=$(date '+%s' -d"$BU_TS")
  BU_AGE=$((NOW_EP-BU_EP))
  BU_AGE_DEL=$((BU_AGE_LAST-BU_AGE))
  __echo 3 "D: ts = $BU_TS, i = $BU_INDEX out of $BU_INDEX_ORIG snapshots"
  if [ "$BU_AGE" -gt "$BU_AGE_LONG" ]; then
    __echo 2 "I: ts = $BU_TS, age:$(age_string "$BU_AGE") > age_long:$(age_string "$BU_AGE_LONG") (old)"
    if [ "$AGE_MODE" = "forget" ]; then
      if [ "$BU_INDEX" -le "$BU_INDEX_MIN" ]; then
        __echo 2 "I: ts = $BU_TS, i:$BU_INDEX <= min:$BU_INDEX_MIN (old but NOT enough snapshots) (old - keep)"
        echo "+$BU_TS"
      else
        __echo 2 "I: ts = $BU_TS, i:$BU_INDEX >  min:$BU_INDEX_MIN (old and enough snapshots)     (old - forget)"
        echo "-$BU_TS"
      fi
    else # "$AGE_MODE" = "keep"
      __echo 2 "I: ts = $BU_TS, age_del/,,_max = $((BU_AGE_DEL*100/BU_AGE_DEL_MAX))% = $(age_string $BU_AGE_DEL)/$(age_string $BU_AGE_DEL_MAX)"
      if [ "$BU_AGE_DEL" -gt "$BU_AGE_DEL_MAX" ]; then
        echo "+$BU_TS"
        __echo 3 "D: ts = $BU_TS, age_last    = $(age_string $BU_AGE) from $(age_string $BU_AGE_LAST) (updated in old)"
        BU_AGE_LAST="$BU_AGE"
        __echo 3 "D: ts = $BU_TS, age_del_max = $(age_string $BU_AGE_DEL_MAX) = $BU_AGE_STEP% of AGE_LONG (constant in old)"
      else
        echo "-$BU_TS"
      fi
    fi
  elif [ "$BU_AGE" -gt "$BU_AGE_SHRT" ] && \
       [ "$BU_INDEX" -gt "$BU_INDEX_MIN" ]; then
    __echo 2 "I: ts = $BU_TS, age:$(age_string "$BU_AGE") >  age_shrt:$(age_string "$BU_AGE_SHRT") and i:$BU_INDEX >  min:$BU_INDEX_MIN (middle)"
    if [ "$BU_AGE_DEL" -gt "$BU_AGE_DEL_MAX" ]; then
      __echo 2 "I: ts = $BU_TS, age_del/,,_max = $((BU_AGE_DEL*100/BU_AGE_DEL_MAX))% = $(age_string $BU_AGE_DEL)/$(age_string $BU_AGE_DEL_MAX) (middle - keep)"
      echo "+$BU_TS"
      __echo 3 "D: ts = $BU_TS, age_last    = $(age_string $BU_AGE) from $(age_string $BU_AGE_LAST) (updated in middle)"
      BU_AGE_LAST="$BU_AGE"
      BU_AGE_DEL_MAX=$((BU_AGE_LAST*BU_AGE_STEP/100))
      __echo 3 "D: ts = $BU_TS, age_del_max = $(age_string $BU_AGE_DEL_MAX) = $BU_AGE_STEP% of AGE_LAST (updated in middle)"
    else
      __echo 2 "I: ts = $BU_TS, age_del/,,_max = $((BU_AGE_DEL*100/BU_AGE_DEL_MAX))% = $(age_string $BU_AGE_DEL)/$(age_string $BU_AGE_DEL_MAX) (middle - forget)"
      echo "-$BU_TS"
    fi
  else
    __echo 2 "I: ts = $BU_TS, age:$(age_string "$BU_AGE") <= age_shrt:$(age_string "$BU_AGE_SHRT") or  i:$BU_INDEX <= min:$BU_INDEX_MIN (recent - keep)"
    echo "+$BU_TS"
  fi
done
EOCMD
  } | __shell_dst
}
##############################################################################
# @brief             prune aged snapshots
# @call              __analyze
# @read  BTRFS_BASE  base of Btrfs set by __load_config
# @read  BU_*        all Btrfs aging related parameters set by __load_config
##############################################################################
__prune () {
  __echo 3 "D: pruning readonly snapshots in $DST_DIR/$BU_DIR"
  # This is basically executed from the destination host
  {
    # variable substitution
    cat << EOCMD
SETX_ON="$SETX_ON"
SETX_OFF="$SETX_OFF"
$SETX_ON
VERBOSE_LEVEL="$VERBOSE_LEVEL"
BU_DIR="$BU_DIR"
DST_DIR="$DST_DIR"
NOOP="$NOOP"
BSV="$BSV"
NOW_EP="$NOW_EP"
ANALYZE_LIST="$(__analyze)"
EOCMD
    # No variable substitution
    cat << 'EOCMD'
# shellcheck disable=SC2046
set -- $ANALYZE_LIST
##############################################################################
# helper functions for remote shell
##############################################################################
__echo () {
  $SETX_OFF
  if [ "$VERBOSE_LEVEL" -ge "$1" ]; then
    shift
    echo "$*" >&2
  fi
  $SETX_ON
}
##############################################################################
# Main routine
##############################################################################
for x in "${@}"; do
  # drop first character + or -
  d="${x#?}"
  if [ -z "${x%%-*}" ]; then
    __echo 1 "I: delete snapshot of $DST_DIR @ $d"
    $NOOP $BSV delete "$DST_DIR/$BU_DIR/$d"
  else
    __echo 1 "I: keep   snapshot of $DST_DIR @ $d"
  fi
done
EOCMD
  } | __shell_dst
}

##############################################################################
# @brief             zap specified snapshots
# @call              __load_config, __list
# @read  BTRFS_BASE  base of Btrfs set by __load_config
##############################################################################
__zap () {
  if [ "$BU_ZAP_ACTIVE" != "true" ]; then
      __echo 0 "E: No zap operation since $BU_BASE/$BU_CONF has BU_ZAP_ACTIVE='$BU_ZAP_ACTIVE'"
      exit 1
  fi
  __echo 3 "D: zap readonly snapshots in $DST_DIR/$BU_DIR"
  # This is basically executed from the destination host
  {
    # variable substitution
    cat << EOCMD
SETX_ON="$SETX_ON"
SETX_OFF="$SETX_OFF"
$SETX_ON
VERBOSE_LEVEL="$VERBOSE_LEVEL"
BU_DIR="$BU_DIR"
DST_DIR="$DST_DIR"
NOOP="$NOOP"
BSV="$BSV"
ID_LIST="$(__list)"
ID_FIRST="$(__list| head -n1)"
ID_LAST="$(__list| tail -n1)"
set -- "$@"
EOCMD
    # No variable substitution
    cat << 'EOCMD'
##############################################################################
# helper functions for remote shell
##############################################################################
__echo () {
  $SETX_OFF
  if [ "$VERBOSE_LEVEL" -ge "$1" ]; then
    shift
    echo "$*" >&2
  fi
  $SETX_ON
}
##############################################################################
# Main routine
##############################################################################
if [ "$(stat -f -c %T "$DST_DIR")" != "btrfs" ] && [ "$(stat -c %i "$DST_DIR")" = "256" ]; then
  __echo 0 "E: $DST_DIR is not Btrfs"
  exit 1
fi
case "$1" in
  half) # half
    # shellcheck disable=SC2046
    set -- $ID_LIST
    BU_INDEX_MAX="${#}"        # items
    BU_INDEX="$BU_INDEX_MAX"  # count down
    BU_INDEX_MIN="$(((BU_INDEX+1)/2))"
    __echo 2 "I: keep recent $BU_INDEX_MIN snapshots out of $BU_INDEX_MAX snapshots"
    for d in "${@}"; do
      # 1 2 3 4 5 6 7 8 ${#}
      # 1 1 2 2 3 3 4 4 stop at
      if [ "$BU_INDEX" -gt "$BU_INDEX_MIN" ]; then
        __echo 1 "I: delete snapshot of $DST_DIR @ $d"
        $NOOP $BSV delete "$DST_DIR/$BU_DIR/$d"
      else
        __echo 1 "I: keep   snapshot of $DST_DIR @ $d"
      fi
      BU_INDEX=$((BU_INDEX-1))
    done
    ;;
  new*) # newest
    __echo 2 "I: zap newest snapshots at $DST_DIR"
    $NOOP $BSV delete "$DST_DIR/$BU_DIR/$ID_LAST"
    ;;
  old*) # oldest
    __echo 2 "I: zap oldest snapshots at $DST_DIR"
    # shellcheck disable=SC2046
    $NOOP $BSV delete "$DST_DIR/$BU_DIR/$ID_FIRST"
    ;;
  *) # labels (local only now)
    __echo 2 "I: zap snapshots at $DST_DIR"
    for d in "${@}"; do
      if [ -e "$DST_DIR/$BU_DIR/$d" ]; then
        __echo 1 "I: delete snapshot of $DST_DIR @ $d"
        $NOOP $BSV delete "$DST_DIR/$BU_DIR/$d"
      else
        __echo 1 "W: missing zap snapshot of $DST_DIR @ $d"
      fi
    done
    ;;
esac
EOCMD
  } | __shell_dst
}

##############################################################################
# @brief             make template BU_CONF and BU_FLTR at $(pwd)
# @create            BU_CONF BU_FLTR files at newly calculated BU_BASE
#
# syntax:
#   $BU template [<DST_DIR>]
##############################################################################
__template () {
  # sanity check
  BU_BASE="$(pwd)"
  if [ -e "$BU_BASE/$BU_CONF" ]; then
    __echo 0 "E: configuration file already exists: $BU_BASE/$BU_CONF"
    exit 1
  elif [ -e "$BU_BASE/$BU_FLTR" ] ; then
    __echo 0 "E: configuration file already exists: $BU_BASE/$BU_FLTR"
    exit 1
  fi
  ############################################################################
  # reasonable defaults
  DST_DIR="$(realpath "${1:-.}")"
  DST_DOM="${2:-local}"
  DST_HOST="${3:-$(hostname)}"
  SRC_DIR="$(realpath "${4:-.}")"
  SRC_DOM="${5:-local}"
  SRC_HOST="${6:-$(hostname)}"
  ############################################################################
  #
  # conf and filter template
  #
  ############################################################################
  __echo 2 "I: make template $BU_BASE/$BU_CONF and $BU_BASE/$BU_FLTR file"
  { cat << EOCMD
cat > "$BU_BASE/$BU_CONF" << 'END_OF_TEMPLATE'
# $BU configuration (Btrfs)

# This configuration file as generated by the "template" command should be
# modified to address .

### DATA AGING PARAMETERS for Btrfs ###

# aging speed variables
BU_INDEX_MIN="$BU_MIN" # keep minimum recent $BU_MIN items
BU_AGE_SHRT="\$(($BU_SHRT))" # threashold to be new data to keep
BU_AGE_LONG="\$(($BU_LONG))" # threashold to be old data to keep or drop
BU_AGE_STEP="$BU_STEP" # $BU_STEP% step for mid range aging

# aged data: keep or forget
# AGE_MODE="keep" # for keeping old data forever
# AGE_MODE="forget" # for erasing really old data
AGE_MODE="keep" # safer initial setting

### DATA LOCATION  for ssh and rsync ###

# source location
SRC_HOST="$SRC_HOST"
SRC_DOM="$SRC_DOM"
SRC_DIR="$SRC_DIR"

# destination location
DST_HOST="$DST_HOST"
DST_DOM="$DST_DOM"
DST_DIR="$DST_DIR"

### DATA ACCESS PARAMETERS for ssh and rsync ###

# rsync options
RSYNC_OPTS="-aHx --inplace --delete-during --numeric-ids"

# ssh options (source side)
SSH_SRC_OPTS="" # provide -l as needed for login name

# ssh options (destination side)
SSH_DST_OPTS="" # provide -l as needed for login name

### EXTRA PARAMETERS ###

# safety (change this if you want to disable some zap operations)
BU_ZAP_ACTIVE="true"

# You can add custom filtering for rsync using $BU_FLTR in this directory
END_OF_TEMPLATE

cat > "$BU_BASE/$BU_FLTR" << 'END_OF_TEMPLATE'
# $BU configuration (rsync)
#
# Example (for making small user home backup)
#
# + /.gnupg/***
# + /.ssh/***
# + /.bash_aliases
# + /.bash_logout
# + /.bashrc
# + /.devscripts
# + /.gbp.conf
# + /.gitconfig
# + /.pbuilderrc
# + /.profile
# + /.reportbugrc
# + /.config/
# + /.config/evolution/
# + /.config/evolution/mail/
# + /.config/evolution/mail/filters.xml
# + /.config/evolution/sources/***
# - *
#
# Please note the above example override default "+ *" which is include
# everythng for $BU.
#
# See more at rsync(1) manpage for "FILTER RULES"
END_OF_TEMPLATE

# match owner with the parent dirctory
UID=\$(stat -c %u .)
GID=\$(stat -c %g .)
$NOOP chown \$UID:\$GID "$BU_BASE/$BU_CONF"
$NOOP chown \$UID:\$GID "$BU_BASE/$BU_FLTR"
EOCMD
  } | __shell_root
}


##############################################################################
# Parse Command Line
##############################################################################
# The quotes around "$@" are essential!
# We need TEMP as the 'eval set --' would nuke the return value of getopt.
TEMP=$(getopt -o 'lri:c:nqvxh' -n "${BU}" \
  --long 'local,remote,id:,config:,noop,quiet,verbose,trace,help' -- "$@")
# Note the quotes around "$TEMP": they are essential!
#echo "DEBUG: ***** TEMP='$TEMP'"
eval set -- "$TEMP"
unset TEMP
# if $BU = ${0##*/} start with "r" --> BU_MODE="remote"
case $BU in
  [rs]*) BU_MODE="remote"
    BU_MES_L="... not available (since $BU starts with 'r' or 's')"
    BU_MES_R="remote mode (default)"
    ;;
  *) BU_MODE=""
    BU_MES_L="local mode (default: working data on Btrfs)"
    BU_MES_R="remote mode (default: working data not on Btrfs)"
    ;;
esac
# OPTIONS
while [ -n "$1" ]; do
  case "$1" in
    -l|--local)
      BU_MODE="local"
      __set_bu_mode "local" "set as -l or --local"
      ;;
    -r|--remote)
      BU_MODE="remote"
      __set_bu_mode "remote" "set as -r or --remote"
      ;;
    -i|--id)
      shift
      BU_ID="$1"
      ;;
    -c|--config)
      shift
      BU_STEM="$1"
      ;;
    -n|--noop)
      NOOP="echo __" # ANY non ""
      ;;
    -q|--quiet)
      VERBOSE_LEVEL=0
      ;;
    -v|--verbose)
      VERBOSE_LEVEL=$((VERBOSE_LEVEL+1))
      ;;
    -x|--trace)
      SETX_ON="set -x"
      SETX_OFF="set +x"
      ;;
    -h|--help)
      __help
      exit 0
      ;;
    '--')
      shift
      break
    ;;
    -*)
      echo "E: Unknown option: '$1'" >&2
      __help
      exit 1
    ;;
    *)
      break
    ;;
  esac
  shift
done
# derivative parameters
BU_CONF="$BU_STEM.$EXT_CONF"
BU_FLTR="$BU_STEM.$EXT_FLTR"
##############################################################################
__echo 3 "D: NOOP          = '$NOOP'"
__echo 3 "D: BU_MODE       = '$BU_MODE'"
__echo 3 "D: BU_STEM       = '$BU_STEM'"
__echo 3 "D: BU_ID         = '$BU_ID'"
__echo 3 "D: VERBOSE_LEVEL = '$VERBOSE_LEVEL'"
$SETX_ON
#############################################################################
# Command (any commands starting with "r" set BU_MODE="remote")
#############################################################################
case "$1" in
  s*) #snapshot
    __load_config "$2"
    __snapshot
    ;;
  l*) # list
    __load_config "$2"
    __list
    ;;
  a*) # analyze
    __load_config "$2"
    __analyze
    ;;
  p*) # prune
    __load_config "$2"
    __prune
    ;;
  zap) # zap
    __load_config "$2"
    shift 2
    __zap "$@"
    ;;
  t*) # template
    __template "$2"
    ;;
  r*) # rsync (only rsync, no Btrfs-snapshot)
    __set_bu_mode "remote" "command=r*"
    __load_config "$2"
    __rsync
    ;;
  h*|'') # help
    __help
    exit 0
    ;;
  *) # unknown
    echo "E: Unknown command: '$1'" >&2
    __help
    exit 1
    ;;
esac
