#!/usr/bin/python3
# vim:se tw=0 sts=4 ts=4 et ai:
"""
Copyright Â© 2020 Osamu Aoki

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
USA
"""
# For sub-commands
import os
import os.path
import sys
import gi
import hashlib
import binascii
from PIL import Image

gi.require_version("GExiv2", "0.10")
from gi.repository import GExiv2


class OMetadata(GExiv2.Metadata):
    def __getitem__(self, key):
        if self.has_tag(key):
            return self.get_tag_string(key)
        return "___NONE___"


# Read first <length> bytes from <path> and return byte stream in HEX format
def firstbytes(path, length):
    with open(path, "rb") as fd:
        header = binascii.hexlify(fd.read()[:length]).decode("UTF-8")
    return header


# JPEG/EXIF files header 3 bytes
def isjpeg(path):
    if firstbytes(path, 3) == "ffd8ff":
        return True
    return False


print(
    "# Image_Hash_sha256\tExif.Photo.DateTimeOriginal\tExif.Photo.DateTimeDigitized\tExif.Image.DateTime\tExif.Image.Model\trealpath"
)
date_error = "{}\t{}\t{}\t{}".format(
    "___IOError___", "___IOError___", "___IOError___", "___IOError___"
)
for ln in sys.stdin:
    fn = ln.rstrip("\n")
    if not os.path.isfile(fn):
        # skip non-file
        continue
    # if os.path.splitext(os.path.basename(fn))[1].lower() == ".json":
    # skip json files
    #    continue
    if not isjpeg(fn):
        print("# ***** NON-JPEG FILE ***** : {}".format(fn))
        # non-JPEG file
        continue
    # print(fn)
    try:
        hashv = hashlib.sha256(Image.open(fn, mode="r").tobytes()).hexdigest()
    except IOError:
        hashv = "___IOError___"
    try:
        md = OMetadata(fn)
        img_date = "{}\t{}\t{}\t{}".format(
            md["Exif.Photo.DateTimeOriginal"],
            md["Exif.Photo.DateTimeDigitized"],
            md["Exif.Image.DateTime"],
            md["Exif.Image.Model"],
        )
    except:
        img_date = date_error
    print("{}\t{}\t{}".format(hashv, img_date, os.path.realpath(fn)))
