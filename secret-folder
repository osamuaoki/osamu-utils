#!/bin/sh -e
# vim:se sw=2 ts=2 sts=2 et ai tw=78:
### VARIABLES ###
HOME="$(eval echo ~)"
# disk image path
PATH_DISK="$HOME/rsync/secret.img"
# device mapper target name
DM_TARGET=secret
# mount path
PATH_MNT="$HOME/secret"
# device mapper target name
DM_TARGET="${PATH_DISK##*/}"
DM_TARGET="${DM_TARGET%%.*}"
# set mode
ECHO="echo"
TSLEEP="0"
NEW="0"
MOUNT="0"
UPDATE="0"
KEEP="0"
SIZE_DISK="16G"
while [ -n "$1" ]; do
  case "$1" in
    new)
      shift
      if [ -n "$1" ];then
        SIZE_DISK="$1"
        shift
      fi
      NEW="1"
      # overrides
      MOUNT="0"
      ECHO="echo"
      break
      ;;
    systemd)
      shift
      ECHO="systemd-cat -p 5 -t bss echo"
      TSLEEP="120"
      ;;
    mount)
      shift
      MOUNT="1"
      ;;
    update)
      shift
      MOUNT="1"
      UPDATE="1"
      ;;
    keep)
      shift
      MOUNT="1"
      KEEP="1"
      ;;
    *)
      echo "=== secret folder tool ==="
      echo "${0##*/} [new [size]|systemd|update|keep]"
      exit 0
      ;;
  esac
done

### FUNCTIONS ###
new_secret () {
  if ! secret-tool lookup LUKS "$PATH_DISK" >/dev/null ; then
    echo "I: Setup passphrase for LUKS: $PATH_DISK" >&2
    secret-tool store --label="LUKS $PATH_DISK" LUKS "$PATH_DISK"
  else
    echo "I: Passphrase for LUKS aleady stored: $PATH_DISK" >&2
  fi
  echo "I: create $SIZE_DISK image: $PATH_DISK" >&2
  fallocate -l "$SIZE_DISK" "$PATH_DISK"
  echo "I: create LUKS in $PATH_DISK" >&2
  secret-tool lookup LUKS "$PATH_DISK" | \
    cryptsetup luksFormat "$PATH_DISK" -
  echo "I: open LUKS as $DM_TARGET" >&2
  secret-tool lookup LUKS "$PATH_DISK" | \
    sudo cryptsetup open "$PATH_DISK" "$DM_TARGET" --type luks
  echo "I: create btrfs in /dev/mapper/$DM_TARGET" >&2
  sudo mkfs.btrfs "/dev/mapper/$DM_TARGET"
  mkdir -p "$PATH_MNT"
  echo "I: mount $DM_TARGET on $PATH_MNT"
  sudo mount "/dev/mapper/$DM_TARGET" "$PATH_MNT"
  echo "I: set UID:GID=1000:1000 for $PATH_MNT" >&2
  sudo chown "1000:1000" "$PATH_MNT"
  echo "!!! Don't write into ~/secret/ manually                 !!!" >  ~/secret/DO_NOT_WRITE_IN_MANUALLY
  echo "!!! This should be accessed only by ~/bin/secret-folder !!!" >> ~/secret/DO_NOT_WRITE_IN_MANUALLY
}

check_secret () {
  if [ ! -e "$PATH_DISK" ]; then
    $ECHO "disk image missing: $PATH_DISK"
    $ECHO "create disk image using ~/bin/luks-image script interactively"
    exit 1
  fi
  if [ ! -e "$PATH_MNT" ]; then
    $ECHO "E: mount point path missing: $PATH_MNT"
    exit 1
  fi
  # wait for 120s if run by systemd start up
  sleep $TSLEEP
}

mount_secret () {
  # let's mount
  if mount|grep -e "$PATH_MNT" >/dev/null; then
    $ECHO "skipping to mount LUKS disk image $PATH_DISK on $PATH_MNT (already mounted)"
  else
    $ECHO "unlock LUKS disk image $PATH_DISK as $DM_TARGET"
    secret-tool lookup LUKS "$PATH_DISK" | \
      sudo cryptsetup open "$PATH_DISK" "$DM_TARGET" --type luks
    $ECHO "mount $DM_TARGET on $PATH_MNT"
    sudo mount "/dev/mapper/$DM_TARGET" "$PATH_MNT"
  fi
}

backup_secret () {
while read -r F ; do
  D="$(dirname "$F")"
  if [ "$D" = "." ]; then
    D=""
  else
    D="$D/"
  fi
  if [ -f "$F" ]; then
    if [ -n "$D" ]; then
      mkdir -p "$HOME/secret/$D"
    fi
    rsync -a "$HOME/$F" "$HOME/secret/$D"
  elif [ -d "$F" ]; then
    mkdir -p "$HOME/secret/$F"
    rsync -ax --del "$HOME/$F/" "$HOME/secret/$F"
  else
    $ECHO "broken ${0##*/}: $F non-existing"
  fi
done
}

unmount_secret () {
  sync;sync;sync
  sudo umount "$PATH_MNT" || true
  sudo cryptsetup close "$DM_TARGET" || true
}

### MAIN ###

# mount ~/secret
cd "$HOME"

if [ "$NEW" = "1" ]; then
  new_secret
fi
if [ "$MOUNT" = "1" ]; then
  check_secret
  mount_secret
fi
# backup secret files into ~/secret

if [ "$UPDATE" = "1" ]; then
  { grep -v "^#" << EOF
# Files to backup
.bash_logout
.bashrc
.profile
.bash_aliases
.bash_fzf_completion
.bash_fzf_keybindings
.bashrc
.benrc
.caffrc
.debrc
.devscripts
.gbp.conf
.gitconfig
.quiltrc-dpkg
.reportbugrc
.sbuildrc
.shellcheckrc
.config/black
.config/flake8
.config/pylintrc
# directories to backup
Documents
bin
.ssh
.gnupg
.config/autostart
.config/systemd/user
.local/share/keyrings
EOF
  } | backup_secret
fi

if [ "$KEEP" != "1" ]; then
  # unmount ~/secret
  unmount_secret
fi

