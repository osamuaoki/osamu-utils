#!/bin/sh -e
# vim:se tw=78 ai ts=2 sts=2 sw=2 et:
##############################################################################
# Copyright (C) Osamu Aoki <osamu@debian.org>
# License: GPL 2+
##############################################################################
# fd=9 not used elsewhere in this script.
exec 9< "$0"
if ! flock --nonblock 9 ; then
  echo "${0##*/} already running.  Try later" >&2
  exit 2
fi
SIM=""
#############################################################################
# SNAPSHOT CONFIGURATION
#############################################################################
# SOURCE BTRFS path
BTRFS_SRC="/home"
# SNAPSHOT BTRFS path (RO)
BTRFS_SNAP="$HOME/snap"

#############################################################################
# RSYNC CONFIGURATION
##############################################################################
# rsync command and options
#     -a --archive
#     -H --hard-links
#     -A --acls
#     -X --xattrs
#     -S --sparse
#     -v --verbose
RSYNC="rsync -aHAXSv"
# SOURCE RSYNC path (Don't add / at the end)
RSYNC_SRC="/home"
# DEST RSYNC path
RSYNC_DEST="/mnt/backup/dest"
# SNAPSHOT RSYNC path
RSYNC_SNAP="/mnt/backup/snap"
# To add further refined filtering rules, please read rsync(1) manpage for
# --exclude, --include, --filter, and 'FILTER RULES':
#  * Skip directory name containing /Downloads/
#  * Skip directory name containing /tmp/
#  * Skip file name ending .swp (vim artifacts)
#  * Skip file name ending .iso (CD image files)
RSYNC_FILTER="--exclude=/Downloads/ \
  --exclude=/.cache/ \
  --exclude=/tmp/ \
  --exclude=unidic-cwj-2.3.0.zip \
  --exclude=BCCWJ_*.tsv \
  --exclude=BCCWJ_*.zip \
  --exclude=*.swp \
  --exclude=*.iso"

#############################################################################
# TIME/AGING CONFIGURATION
##############################################################################
TIMESTAMP=$(date -u --iso=second)
NOW_EPOCH=$(date +%s -d"$TIMESTAMP")
INDEX_NEW=5                  # Number of new timestamp index (last in list) to keep
P_AGE_HI=$((200*24*60*60))   # Use P_AGE_DEL to prune if old:   >> P_AGE_HI
P_AGE_LO=$((60*60))          # Keep always young ones if young: << P_AGE_LO
P_AGE_DEL=$((100*24*60*60))  # Prune delta criteria for old ones
P_AGE_FRC=7                  # Prune ratio criteria for typical ones (7 means 70%)

##############################################################################
# internal functions
##############################################################################
# Verbose level, 0 through 3
VERBOSE_LEVEL="1"
# 0     Quiet           Print fatal errors only
# 1     Default         Print errors and warnings only
# 2     Verbose         Show equivalent shell commands being executed
# 3     Debug mode      Everything
vecho () {
if [ "$1" -le $VERBOSE_LEVEL ]; then
  shift
  echo "$*" >&2
fi
}

report () {
  if [ "$1" = "delete" ]; then
    if [ "$P_MODE" = "delete" ]; then
      echo "$2"
    elif [ "$P_MODE" = "both" ]; then
      echo "$2 --- delete --- $3"
    fi
  else
    if [ "$P_MODE" = "keep" ]; then
      echo "$2"
    elif [ "$P_MODE" = "both" ]; then
      echo "$2 +++  keep  +++ $3"
    fi
  fi
}

prune () {
# @ $NOW_EPOCH          EPOCH for current time
# @ $@                  array of ISO time of each backup (oldest first)
# @ $INDEX_NEW          Number of new timestamp index (last in list) to keep
# @ $P_AGE_HI           Use P_AGE_DEL to prune if >> P_AGE_HI
# @ $P_AGE_LO           Keep always if <<  P_AGE_LO
# @ $P_AGE_DEL          Prune delta criteria
# @ $P_AGE_FRC          Prune ratio criteria (7 means 70%)
# @ $P_MODE             output mode (delete,keep,both)
  if [ "${#}" -le "0" ]; then
    vecho 1 "W: No snapshot available"
    exit 1
  fi
  AGE_LAST=$((NOW_EPOCH-$(date +%s -d"$1")))
  FLAG=1 # update rule with AGE_LAST
  report "keep" "$1" "AGE=$AGE_LAST the oldest (0)"
  shift
  INDEX="0"
  INDEX_OLD=$((${#}-INDEX_NEW))
  for TIMESTAMP in "${@}"; do
    AGE=$((NOW_EPOCH-$(date +%s -d"$TIMESTAMP")))
    INDEX=$((INDEX+1))
    if [ "$FLAG" = "1" ]; then
      P_AGE_REF1=$((AGE_LAST-P_AGE_DEL))
      P_AGE_REF2=$((AGE_LAST*P_AGE_FRC/10))
      vecho 3 "D: update check rule"
    fi
    if [ "$INDEX" -gt "$INDEX_OLD" ]; then
      report "keep" "$TIMESTAMP" "AGE=$AGE, $(($#-INDEX))/${INDEX_NEW}-th newest (6)"
      FLAG=0 # don't bother
    elif [ "$AGE" -gt "$P_AGE_HI" ] && [ "$AGE" -gt "$P_AGE_REF1" ]; then
      report "delete" "$TIMESTAMP" "$AGE !< HI=$P_AGE_HI, DEL=$P_AGE_REF1, FRC=$P_AGE_REF2 (1)"
      FLAG=0
    elif [ "$AGE" -gt "$P_AGE_HI" ]; then
      report "keep" "$TIMESTAMP" "AGE=$AGE << HI=$P_AGE_HI, DEL=$P_AGE_REF1, FRC=$P_AGE_REF2 (2)"
      FLAG=1
    elif [ "$AGE" -lt "$P_AGE_LO" ]; then
      report "keep" "$TIMESTAMP" "AGE=$AGE << LO=$P_AGE_LO young (5)"
      FLAG=0 # don't bother
    elif [ "$AGE" -gt "$P_AGE_REF2" ]; then
      report "delete" "$TIMESTAMP" "AGE=$AGE !< FRC=$P_AGE_REF2 (3)"
      FLAG=0
    else
      report "keep" "$TIMESTAMP" "AGE=$AGE << FRC=$P_AGE_REF2 (4)"
      FLAG=1
    fi
    AGE_LAST="$AGE"
  done
  return
}

btrfs_snap () {
  mkdir -p "$BTRFS_SNAP" >/dev/null
  if [ -d "$BTRFS_SNAP/$TIMESTAMP" ]; then
    sleep "2s"
    TIMESTAMP=$(date -u --iso=second)
    NOW_EPOCH=$(date +%s -d"$TIMESTAMP")
  fi
  if [ -d "$BTRFS_SNAP/$TIMESTAMP" ]; then
    echo "Broken time situation"
    exit 1
  fi
  # shellcheck disable=SC2086
  $SIM sudo btrfs subvolume snapshot -r "$BTRFS_SRC" "$BTRFS_SNAP/$TIMESTAMP"
}

btrfs_snap_list () {
  P_MODE="both"
  # shellcheck disable=SC2046,SC2010
  prune $(cd "$BTRFS_SNAP" >/dev/null ; ls -1d -- * | \
    grep -E '^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\+00:00$')
}

btrfs_snap_prune () {
  P_MODE="delete"
  # shellcheck disable=SC2046,SC2010
  LIST=$(prune $(cd "$BTRFS_SNAP" >/dev/null ; ls -1d -- * | \
    grep -E '^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\+00:00$') |\
    sed -e "s:^:$BTRFS_SNAP/:")
  for D in $LIST; do
  # shellcheck disable=SC2086
    $SIM sudo btrfs subvolume delete "$D"
  done
}

rsync_snap () {
  mkdir -p "$RSYNC_DEST" >/dev/null
  # shellcheck disable=SC2086
  $SIM sudo $RSYNC $RSYNC_FILTER $RSYNC_SRC "$RSYNC_DEST/"

  if [ -d "$RSYNC_SNAP/$TIMESTAMP" ]; then
    sleep "2s"
    TIMESTAMP=$(date -u --iso=second)
    NOW_EPOCH=$(date +%s -d"$TIMESTAMP")
  fi
  if [ -d "$RSYNC_SNAP/$TIMESTAMP" ]; then
    echo "Broken time situation"
    exit 1
  fi
  mkdir -p "$RSYNC_SNAP" >/dev/null
  # shellcheck disable=SC2086
  $SIM sudo btrfs subvolume snapshot -r "$RSYNC_DEST" "$RSYNC_SNAP/$TIMESTAMP"
}

rsync_snap_list () {
  P_MODE="both"
  # shellcheck disable=SC2046,SC2010
  prune $(cd "$RSYNC_SNAP" >/dev/null ; ls -1d -- * | \
    grep -E '^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\+00:00$')
}

rsync_snap_prune () {
  P_MODE="delete"
  # shellcheck disable=SC2046,SC2010
  LIST=$(prune $(cd "$RSYNC_SNAP" >/dev/null ; ls -1d -- * | \
    grep -E '^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\+00:00$') |\
    sed -e "s:^:$RSYNC_SNAP/:")
  for D in $LIST; do
  # shellcheck disable=SC2086
    $SIM sudo btrfs subvolume delete "$D"
  done
}

__help () {
echo "NAME"
echo "    ${0##*/} -- btrfs backup helper"
echo
echo "SYNOPSIS"
echo "    ${0##*/} [-s|-x|-q|-v[v]] [snap|list|prune|rsnap|rlist|rprune]"
echo
echo "DESCRIPTION"
echo "    -s        simulate (No sudo)"
echo "    -x        trace shell command for debug"
echo "    -q        quiet"
echo "    -v        verbose"
echo "    -vv       very verbose"
echo "    snap      snap data in $BTRFS_SRC"
echo "    list      list snapshots in $BTRFS_SNAP"
echo "    prune     prune snapshots in $BTRFS_SNAP"
echo "    rsnap     rsync and snap data in $RSYNC_DEST and $RSYNC_SRC"
echo "    rlist     list rsynced snapshots in $RSYNC_SNAP"
echo "    rprune    prune rsynced snapshots in $RSYNC_SNAP"
echo
echo "Copyright 2020 Osamu Aoki <osamu@debian.org>, GPL 2+"
}

##############################################################################
# constants
##############################################################################
while [ -n "$1" ] ; do
  case $1 in
    -x) set -x
      ;;
    -s) SIM="echo"
      ;;
    -q) VERBOSE_LEVEL=0
      ;;
    -vv) VERBOSE_LEVEL=3
      ;;
    -v) VERBOSE_LEVEL=2
      ;;
    *) break
      ;;
  esac
  shift
done
while [ -n "$1" ] ; do
  case $1 in
    h*) __help
      exit
      ;;
    s*) btrfs_snap
      exit
      ;;
    l*) btrfs_snap_list
      exit
      ;;
    p*) btrfs_snap_prune
      exit
      ;;
    rs*) rsync_snap
      exit
      ;;
    rl*) rsync_snap_list
      exit
      ;;
    rp*) rsync_snap_prune
      exit
      ;;
    *) echo "Unknown command: '$1'"
      __help
      exit
      ;;
  esac
  shift
done
__help
