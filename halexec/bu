#!/bin/sh -e
## @brief make and manage BTRFS snapshots of the target device
# vim:se tw=78 ai ts=2 sts=2 sw=2 et:
##############################################################################
# Copyright (C) Osamu Aoki <osamu@debian.org>
# License: GPL 2+
##############################################################################
# fd=9 not used elsewhere in this script.
exec 9< "$0"
if ! flock --nonblock 9 ; then
  echo "hal ${0##*/} already running.  Try later" >&2
  exit 2
fi
##############################################################################
# internal functions
##############################################################################
# Verbose level, 0 through 3
VERBOSE_LEVEL="1"
# 0     Quiet           Print fatal errors only
# 1     Default         Print errors and warnings only
# 2     Verbose         Show equivalent shell commands being executed
# 3     Debug mode      Everything
vecho () {
if [ "$1" -le $VERBOSE_LEVEL ]; then
  shift
  echo "$*" >&2
fi
}

report () {
  # @ $1 action
  # @ $2 comment
  # @ $TIMESTAMP
  # @ $AGE
  # @ $P_MODE
  SEC="$AGE"
  MIN=$((SEC/60))
  SEC=$((SEC%60))
  HR=$((MIN/60))
  MIN=$((MIN%60))
  DAY=$((HR/24))
  HR=$((HR%24))
  if [ "$AGE" -gt "$P_AGE_HI" ]; then
    vecho 3 "D: AGE=$AGE, older age, check against $P_AGE_REF1"
  elif [ "$AGE" -lt "$P_AGE_LO" ]; then
    vecho 3 "D: AGE=$AGE, younger age, no check"
  else
    vecho 3 "D: AGE=$AGE, middle age, check against $P_AGE_REF2"
  fi
  if [ "$ACTION" = "_list" ]; then
    if [ "$1" = "delete" ]; then
      MARK="--- Del.:"
    else
      MARK="+++ Keep:"
    fi
    printf '%s %s %i days %02i:%02i:%02i old, %s\n' \
        "$TIMESTAMP" "$MARK" "$DAY" "$HR" "$MIN" "$SEC" "$2"
  elif [ "$ACTION" = "_prune" ]; then
    if [ "$1" = "delete" ]; then
      echo "$TIMESTAMP"
    fi
  fi
}

prune () {
# @ $NOW_EPOCH          EPOCH for current time
# @ $@                  array of ISO time of each backup (oldest first)
# @ $INDEX_NEW          Number of new timestamp index (last in list) to keep
# @ $P_AGE_HI           Use P_AGE_DEL to prune if >> P_AGE_HI
# @ $P_AGE_LO           Keep always if <<  P_AGE_LO
# @ $P_AGE_DEL          Prune delta criteria
# @ $P_AGE_FRC          Prune ratio criteria (7 means 70%)
# @ $P_MODE             output mode (delete,keep,both)
  if [ "${#}" -le "0" ]; then
    vecho 1 "W: No snapshot available"
    exit 1
  fi
  TIMESTAMP="$1"
  AGE=$((NOW_EPOCH-$(date +%s -d"$TIMESTAMP")))
  FLAG=1 # update rule with AGE_LAST
  report "keep" "the oldest (0)"
  shift
  AGE_LAST="$AGE"
  INDEX="0"
  INDEX_OLD=$((${#}-INDEX_NEW))
  for TIMESTAMP in "${@}"; do
    AGE=$((NOW_EPOCH-$(date +%s -d"$TIMESTAMP")))
    INDEX=$((INDEX+1))
    if [ "$FLAG" = "1" ]; then
      P_AGE_REF1=$((AGE_LAST-P_AGE_DEL))
      P_AGE_REF2=$((AGE_LAST*P_AGE_FRC/10))
      vecho 3 "D: update check rule"
    fi
    if [ "$INDEX" -gt "$INDEX_OLD" ]; then
      report "keep" "$(($#-INDEX))/${INDEX_NEW}-th newest (6)"
      FLAG=0 # don't bother
    elif [ "$AGE" -gt "$P_AGE_HI" ] && [ "$AGE" -gt "$P_AGE_REF1" ]; then
      report "delete" "not new enough for older age (1)"
      FLAG=0
    elif [ "$AGE" -gt "$P_AGE_HI" ]; then
      report "keep" "new enough for older age (2)"
      FLAG=1
    elif [ "$AGE" -lt "$P_AGE_LO" ]; then
      report "keep" "younger age (5)"
      FLAG=0 # don't bother
    elif [ "$AGE" -gt "$P_AGE_REF2" ]; then
      report "delete" "not new enough for middle age (3)"
      FLAG=0
    else
      report "keep" "new enough for middle age (4)"
      FLAG=1
    fi
    AGE_LAST="$AGE"
  done
  return
}

_snap () {
  if [ "$MODE" = "rsync" ]; then
    # shellcheck disable=SC2086
    $NOOP sudo $RSYNC $RSYNC_FILTER "$SRC/" "$BTRFS_SRC"

    if [ -d "$SNAP/$TIMESTAMP" ]; then
      sleep "2s"
      TIMESTAMP=$(date -u --iso=second)
      NOW_EPOCH=$(date +%s -d"$TIMESTAMP")
    fi
    if [ -d "$SNAP/$TIMESTAMP" ]; then
      echo "Broken time situation in $SNAP"
      exit 1
    fi
  fi
  # shellcheck disable=SC2086
  $NOOP sudo btrfs subvolume snapshot -r "$BTRFS_SRC" "$SNAP/$TIMESTAMP"
}

_list () {
  # shellcheck disable=SC2046,SC2010
  prune $(cd "$SNAP" >/dev/null ; ls -1d -- * | \
    grep -E '^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\+00:00$')
}

_prune () {
  # shellcheck disable=SC2046,SC2010
  LIST=$(prune $(cd "$SNAP" >/dev/null ; ls -1d -- * | \
    grep -E '^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\+00:00$') |\
    sed -e "s:^:$SNAP/:")
  for D in $LIST; do
  # shellcheck disable=SC2086
    $NOOP sudo btrfs subvolume delete "$D"
  done
}

__help () {
echo "NAME"
echo "    ${0##*/} -- btrfs backup helper"
echo
echo "SYNOPSIS"
echo "    ${0##*/} [-s|-l|-p|-x|-q|-v[v]|-n] [PATH|alias]"
echo
echo "DESCRIPTION"
echo "    -s        snap data in $SRC"
echo "    -l        list snapshots for $SRC"
echo "    -p        prune snapshots for $SRC"
echo "    -n        No action (prune snapshots for $SRC)"
echo "    -x        trace shell command for debug"
echo "    -q        quiet"
echo "    -v        verbose"
echo "    -vv       very verbose"
echo
echo "Copyright 2020 Osamu Aoki <osamu@debian.org>, GPL 2+"
}

#############################################################################
# TIME/AGING CONFIGURATION
##############################################################################
TIMESTAMP=$(date -u --iso=second)
NOW_EPOCH=$(date +%s -d"$TIMESTAMP")
INDEX_NEW=5                  # Number of new timestamp index (last in list) to keep
P_AGE_HI=$((200*24*60*60))   # Use P_AGE_DEL to prune if old:   >> P_AGE_HI
P_AGE_LO=$((60*60))          # Keep always young ones if young: << P_AGE_LO
P_AGE_DEL=$((100*24*60*60))  # Prune delta criteria for old ones
P_AGE_FRC=7                  # Prune ratio criteria for typical ones (7 means 70%)
#############################################################################
# RSYNC CONFIGURATION
##############################################################################
# rsync command and options
#     -a --archive     == -rlptgoD
#     -H --hard-links
#     -A --acls
#     -X --xattrs
#     -S --sparse
#     -x --one-file-system
#     --delete-during
#     -v --verbose
RSYNC="rsync -aHAXSxv --delete-during"
# Please note --delete-excluded can't be used to avoid trying to remove
# mount points used by other submodules
#
# To add further refined filtering rules, please read rsync(1) manpage for
# --exclude, --include, --filter, and 'FILTER RULES':
#  * Skip directory name .snap/
#  * Skip directory name Downloads/
#  * Skip directory name tmp/
#  * Skip file name ending .swp (vim artifacts)
#  * Skip file name ending .iso (CD image files)
# ...
RSYNC_FILTER="\
  --exclude=.snap/ \
  --exclude=Downloads/ \
  --exclude=.anthy/ \
  --exclude=.mozc/ \
  --exclude=.mozilla/ \
  --exclude=.cache/ \
  --exclude=.w3m/ \
  --exclude=tmp/ \
  --exclude=.bash_history \
  --exclude=.lesshst \
  --exclude=.Xauthority \
  --exclude=.ICEauthority \
  --exclude=.lesshst \
  --exclude=.config/git/gitk \
  --exclude=.config/mc/ini \
  --exclude=.local/share/gnome-shell/application_state \
  --exclude=.local/share/mc/history \
  --exclude=*.swp \
  --exclude=*.iso"

#  --exclude=unidic-cwj-2.3.0.zip \
#  --exclude=BCCWJ_*.tsv \
#  --exclude=BCCWJ_*.zip \

##############################################################################
# ACTION and MODE setting
##############################################################################
NOOP="" # "echo"
VERBOSE_LEVEL=1
MODE="direct" # "rsync"
ACTION="_list" # "_snap" "_prune"
while [ -n "$1" ] ; do
  case $1 in
    -h|--help) __help
      exit
      ;;
    -r|--rsync) MODE="rsync"
      ;;
    -n) NOOP="echo"
      ;;
    -s|--snap) ACTION="_snap"
      ;;
    -l|--list) ACTION="_list"
      ;;
    -p|--prune) ACTION="_prune"
      ;;
    -q) VERBOSE_LEVEL=0
      ;;
    -vv) VERBOSE_LEVEL=3
      ;;
    -v) VERBOSE_LEVEL=2
      ;;
    -x) set -x
      ;;
    *) break
      ;;
  esac
  shift
done
# SOURCE path (Don't add / at the end, relative to /)
if [ -z "$1" ]; then
  SRC="/home"
else
  # allow "./", "."  etc. with consistent results
  SRC="$(realpath "$1")"
fi
#############################################################################
# SNAPSHOT CONFIGURATION
#############################################################################
if [ "$MODE" = "direct" ]; then
  BTRFS_MNT_ROOT=""
else # rsync
  BTRFS_MNT_ROOT="/srv/backup"
  if [ ! -e "$BTRFS_MNT_ROOT" ]; then
    echo "You must have '$BTRFS_MNT_ROOT' directory available to do rsync" >&2
    exit 1
  fi
fi
if [ ! -d "$SRC" ]; then
  echo "You must have '$SRC' directory available to use this" >&2
  exit 1
fi
BTRFS_SRC="${BTRFS_MNT_ROOT}$SRC"
SNAP="$BTRFS_SRC/.snap"
if [ ! -e "$SNAP" ]; then
  sudo mkdir -p "$SNAP" >/dev/null
fi
#############################################################################
# ACTION
#############################################################################
$ACTION
#############################################################################
#             /etc/fstab
# main disk
# @home on -> /home                   subvol=@home
#
# backup disk
# @home on -> /srv/backup/home        subvol=@home
#############################################################################


