#!/bin/bash -e
## @brief manage configuration files (public/private)
# vim:se tw=78 ai si ts=2 sts=2 sw=2 et:
#
# configuration
#
#HOME=$(echo ~)

# functions
f_help () {
  echo "Syntax:"
  echo "  hal conf i[nstall] # install public configuration files"
  echo "  hal conf d[iff]    # diff against public configuration files"
  echo "  hal conf u[pdate]  # update public configuration files"
  echo "  hal conf b[ackup]  # backup private configuration files in ~/backup"
  exit
}

f_diff () {
# install the latest system skel files
  for p in /etc/skel/.* ; do
    f=$(basename "$p")
    if [ -f "$p" ]; then
      echo " $ diff -u $p  ${HOME}/$f"
      diff -u "$p" "${HOME}/$f" || true
    else
      :
    fi
  done
# install the latest dot files
  for p in ${HOME}/bin/dot/.* ; do
    f=$(basename "$p")
    if [ -f "$p" ]; then
      echo " $ diff -u ~/bin/dot/$f  $f"
      diff -u "$p" "${HOME}/$f" || true
    fi
  done
# install the latest pbuilder hooks
  sudo mkdir -p /var/cache/pbuilder/hooks
  for p in ${HOME}/bin/pbuilder/* ; do
    f=$(basename "$p")
    if [ -f "$p" ]; then
      echo " $ diff -u  ~/bin/pbuilder/$f  .../hooks/$f"
      sudo diff -u "$p" "/var/cache/pbuilder/hooks/$f" || true
    fi
  done
}

f_install () {
# check diff
  f_diff
  echo "============================================================================"
# install the latest system skel files
  for p in /etc/skel/.* ; do
    f=$(basename "$p")
    if [ -f "$p" ]; then
      echo " $ cp -f $p ${HOME}/$f"
      cp -f "$p" "${HOME}/$f"
    fi
  done
# install the latest dot files
  for p in ${HOME}/bin/dot/.* ; do
    f=$(basename "$p")
    if [ -f "$p" ]; then
      echo " $ cp -f ~/bin/dot/$f  ~/$f"
      cp -f "$p" "${HOME}/$f"
    fi
  done
# install the latest pbuilder hooks
  sudo mkdir -p /var/cache/pbuilder/hooks
  for p in ${HOME}/bin/pbuilder/* ; do
    f=$(basename "$p")
    if [ -f "$p" ]; then
      echo " $ sudo cp -f ~/bin/pbuilder/$f  .../hooks/$f"
      sudo cp -p "$p" "/var/cache/pbuilder/hooks/$f"
    fi
  done
}

f_backup () {
  BTIME="$(date -u +'%Y%m%d%H%M')"
  BUSR="backup/USR$BTIME"
  BSYS="backup/SYS$BTIME"
  mkdir -p "${HOME}/$BUSR" >/dev/null
  echo "======================================================================"
  echo "I: Back up user config to ${HOME}/$BUSR"
  # tailing / of rsync source is important
  rsync -av "${HOME}/bin"       "${HOME}/$BUSR/"
  rsync -av "${HOME}/.gnupg"    "${HOME}/$BUSR/"
  rsync -av "${HOME}/.ssh"      "${HOME}/$BUSR/"
  # evolution needs to be backuped for filter
  rsync -av \
      --exclude=".config/chromium" \
      --exclude=".config/libreoffice" \
      --exclude=".config/GIMP" \
      "${HOME}/.config"   "${HOME}/$BUSR/"
  rsync -av \
      --exclude=".local/share/Trash" \
      "${HOME}/.local"    "${HOME}/$BUSR/"
  #rsync -av "${HOME}//"          "${HOME}/$BUSR/"
  for p in /etc/skel/.* ; do
    f=$(basename "$p")
    if [ -f "${HOME}/$f" ]; then
      rsync -av "${HOME}/$f" "${HOME}/$BUSR"
    fi
  done
  for p in ${HOME}/bin/dot/.* ; do
    f=$(basename "$p")
    if [ -f "${HOME}/$f" ]; then
      rsync -av "${HOME}/$f" "${HOME}/$BUSR"
    fi
  done
  echo "======================================================================"
  mkdir -p "${HOME}/$BSYS/etc" >/dev/null
  echo "I: Back up system config to ${HOME}/$BSYS"
  # backup the key /etc contents
  sudo rsync -av \
    /etc/aliases \
    /etc/alternatives \
    /etc/apt \
    /etc/chromium \
    /etc/chromium.d \
    /etc/debian_version \
    /etc/default \
    /etc/email-addresses \
    /etc/exim4 \
    /etc/fstab \
    /etc/group \
    /etc/gshadow \
    /etc/hostname \
    /etc/hosts \
    /etc/passwd \
    /etc/shadow \
    /etc/ssh \
    /etc/sudoers \
    /etc/sudoers.d \
    /etc/sysctl.conf \
    /etc/sysctl.d \
    "${HOME}/$BSYS/etc"
  # backup the latest package states
  mkdir -p "${HOME}/$BSYS/apt" >/dev/null
  sudo rsync -av /var/lib/apt/extended_states "${HOME}/$BSYS/apt"
  mkdir -p "${HOME}/$BSYS/dpkg" >/dev/null
  sudo rsync -av \
    /var/lib/dpkg/diversions \
    /var/lib/dpkg/statoverride \
    /var/lib/dpkg/status \
    "${HOME}/$BSYS/dpkg"
  # backup the latest pbuilder hooks
  mkdir -p "${HOME}/$BSYS/pbuilder/hooks" >/dev/null
  sudo rsync -av /var/cache/pbuilder/hooks "${HOME}/$BSYS/pbuilder"
  sudo chown -R 1000:1000 "${HOME}/$BSYS"
  echo "===================================================================="
  echo "For exim:       'dpkg-reconfigure -plow exim4-config' change"
  echo "For cowbuilder: 'sudo cowbuilder create' (new)"
  echo "===================================================================="
}

f_update () {
# update the configuration files by the latest installed dot files
  for p in ${HOME}/bin/dot/.* ; do
    f=$(basename "$p")
    if [ -f "$p" ]; then
      echo " $ cp -f ~/$f $p"
      cp -f "${HOME}/$f" "$p"
    fi
  done
# update the configuration files by the latest installed pbuilder hooks
  sudo mkdir -p /var/cache/pbuilder/hooks
  for p in /var/cache/pbuilder/hooks/* ; do
    f=$(basename "$p")
    if [ -f "$p" ]; then
      echo " $ sudo cp -f .../hooks/$f ~/bin/pbuilder/$f"
      sudo cp -p "/var/cache/pbuilder/hooks/$f" "$p"
    fi
  done
}

case "$1" in
  b*)
    f_backup
        ;;
  i*)
    f_install
        ;;
  d*)
    f_diff
        ;;
  u*)
    f_update
        ;;
  *)
    f_help
esac
