#!/bin/sh -e
## @brief initial system setups (apt/sudo/...)
# Initial setup
# Copyright 2018 Osamu Aoki <osamu@debian.org>, GPL-2+
# vim: set ts=2 sts=2 sw=2 ai et:
#############################################################################
# Set to run as ROOT
if [ $(id -un) != root ]; then
  #set -x
  if [ -x /usr/bin/sudo ] && [ -r /etc/sudoers.d/custom ]; then
    echo "Please type the password of your user account"
    sudo --preserve-env $0 $*
  else
    echo "Please type the password of the root account"
    su --preserve-environment -c $0 $*
  fi
  #set +x
  exit
fi

echo "Executing '$0' (sub)command as root with '$*'" >&2

# sanity check
case "$1" in
  '')
    STEP_LAST=999
    ;;
  [0-9]|[0-9][0-9]|[0-9][0-9][0-9])
    STEP_LAST="$1"
    ;;
  *)
    echo "E: illegal argument '$1'"
    exit 1
    ;;
esac

echo "I: runs all script up to step $STEP_LAST"

#############################################################################
# The following function is used to install packages
#############################################################################

aptinstall () {
  if [ -n "$1" ] && [ $# -ge 3 ]; then
    if [ "$1" -le "$STEP_LAST" ]; then
      echo "I: condition: step=$1 <= step_last=$STEP_LAST"
      echo "I: install $2"
      shift; shift
      echo "I: packages: $*"
      aptitude install "$@"
    else
      exit 0
    fi
  fi
}

#############################################################################
# The following commands are run under ROOT
#############################################################################

#############################################################################
# initially we only have apt
#############################################################################
echo "I: step 0: install bare minimum"
apt update
apt install aptitude nano-
aptitude update
aptitude full-upgrade

#############################################################################
echo "set apt/aptitude with non-free repo access"
# Basic apt set up after the install: Enable contrib + non-free
if grep -q non-free /etc/apt/sources.list || \
   grep -q contrib /etc/apt/sources.list ; then
  echo "Already contrib + non-free enabled"
else
  echo "Enable contrib + non-free"
  sed -i -e 's/main/main contrib non-free/' /etc/apt/sources.list
fi

if grep -q "backports" /etc/apt/sources.list ; then
  echo "Already backports enabled"
else
  echo "Enable backports"
  cp /etc/apt/sources.list /etc/apt/sources.list.orig
  echo >> /etc/apt/sources.list
  sed -n -e 's/, previously.*$/ from testing/' -e 's/-updates/-backports/gp' \
    /etc/apt/sources.list.orig >> /etc/apt/sources.list
fi

#############################################################################
aptinstall 1 "firmware packages" firmware-iwlwifi firmware-linux firmware-misc-nonfree firmware-realtek

#############################################################################
aptinstall 2 "basic console packages" \
  sudo mc \
  btrfs-progs locales-all \
  fzf git gitk \
  screen \
  rsync \
  vim vim-scripts

#############################################################################
echo "set the primary user privileges (sudo)"
# Set primary user name (even if it was started as root)
#USERNAME=$(id -un 1000)
mkdir -p /etc/sudoers.d
if [ ! -f /etc/sudoers.d/custom ]; then
  cat >/etc/sudoers.d/custom <<END
# No passowrd required for the user in sudo group
# please note the last match wins configuration
%sudo ALL = (ALL:ALL) NOPASSWD: ALL
# No password for 8 hours
#Defaults timestamp_timeout = 480
#Defaults timestamp_type = global
END

#############################################################################
echo "set group membership"
# Set up normal group membership
  /usr/sbin/adduser $USERNAME adm
  /usr/sbin/adduser $USERNAME backup
  /usr/sbin/adduser $USERNAME dialout
  /usr/sbin/adduser $USERNAME dip
  /usr/sbin/adduser $USERNAME games
  /usr/sbin/adduser $USERNAME mail
  /usr/sbin/adduser $USERNAME src
  /usr/sbin/adduser $USERNAME staff
  /usr/sbin/adduser $USERNAME sudo
  /usr/sbin/adduser $USERNAME www-data
fi
#############################################################################
echo "set grub installer to probe other drives"
if grep -q "^GRUB_DISABLE_OS_PROBER=false" /etc/default/grub; then
  echo "Already probing multiple drives"
else
  echo "Enable to probe multiple drives"
  echo "" >> /etc/default/grub
  echo "# Set up to probe other drives" >> /etc/default/grub
  echo "GRUB_DISABLE_OS_PROBER=false" >> /etc/default/grub
fi

#############################################################################
aptinstall 3 "basic GUI/web packages" \
  chromium gnome-firmware gparted \
  ibus-anthy ibus-mozc ssh-askpass-gnome

#############################################################################
aptinstall 4 "basic development packages" \
  devscripts \
  dgit \
  dh-exec \
  ben \
  quilt \
  sbuild \
  schroot

#############################################################################
aptinstall 12 "extra console packages" \
  moreutils \
  tmux \
  imediff \
  neovim \
  ripgrep \
  fd-find \
  exuberant-ctags \
  kpartx \
  cryptsetup \
  nvme-cli \
  smartmontools \
  nodejs \
  npm \

#############################################################################
aptinstall 13 "extra GUI/web packages" \
  fonts-hack \
  meld \
  adwaita-qt \
  zim \
  hugo

#############################################################################
aptinstall 14 "extra development packages" \
  cmake \
  black \
  piuparts apt-cacher-ng \
  cargo \
  python3-pip \
  yarnpkg

#############################################################################
aptinstall 15 "extra virtual packages" \
  gnome-boxes \
  virt-manager

#############################################################################
echo ""
echo "======================================================================="
echo "Current Debian distribution supported:"
sed -n -e "s/^deb\s.*\/\s/    /p" /etc/apt/sources.list
echo "======================================================================="
echo ""
read -p "Type 'RETURN'-key to reboot the system (otherwise ^C to stop here)." FOO
/usr/sbin/shutdown -r now
