#!/bin/sh -e
# shellcheck disable=SC2046,SC2086
# vim:set ai si ts=2 sts=2 sw=2 et:
#
# License: GPL 2.0+
# Copyright 2021 Osamu Aoki <osamu@debian.org>
#
# Reminder for here-doc-text:
# If the delimiter is quoted, the here-doc-text is treated literally,
# otherwise the text is subjected to expansions.
#######################################################################
# Internal constant
LC_ALL=en_US.UTF-8
export LC_ALL
PROG="${0##*/}"
EPH_ID="EPH$$"
LXC_NAME="${LXC_NAME:-sid}"
LXC_CREATE_DIST="${LXC_CREATE_DIST:-debian}"
SUDO="${SUDO:-sudo}"
LXC_START_WAIT_TIME="5" # sec, wait for LXC system to start to have proper network

HOST_USER_UID=$(id -u)
HOST_USER_NAME=$(id -nu)
HOST_SHARE_DIR="${HOST_SHARE_DIR:-$(pwd)}"
#HOST_SHARE_DIR="${HOST_SHARE_DIR:-/home/$HOST_USER_NAME/src/public}"

#######################################################################
# functions
#######################################################################
is_lxc () {
  # check if LXC $1=active/frozen/running/stopped/defined
  if $SUDO lxc-ls -1 --$1 | grep -q --color=none -F -x "$LXC_NAME" ; then
    # $LXC_NAME is $1
    return 0
  else
    return 1
  fi
}

num_projects () {
  find ./ -xdev -maxdepth 2 -mindepth 2  | wc -l
}

lxcexec_help () {
  cat >&2 << EOF
=============================================================================
NAME:
  $PROG -- work on the shared directory from LXC sub-system

SYNOPSIS:
  $PROG [-h|-s|-d|-u|-l|-k|-n|--] [<name>]

DESCRIPTION:
  $PROG creates a previlidged LXC sub-system and let you work on the shared
  directory owned by the primary user account on your host system from the
  rimary user account on the LXC sub-system.  Unless specified otherwise, this
  command logins in to the ephemeral copy of the LXC sub-system (default).
  The default <name> is "sid".  The <name> consists of the release name with
  optional type differentiator.  E.g.  "buster" "sid-devel" "sid-large"
  "buster-full" ...

  Each initial invocation for each <name> creates a new base LXC sub-system
  while sharing the current directory to the LXC's ~/src.  Directory sharing
  doesn't propagate across the mounted filesystem.  This let you use sudo to
  become root within the LXC sub-system without password.  There are no
  password based login to the LXC sub-system for root and user accounts as
  created.

  LXC sub-systems without optional type differentiator should be kept as a
  minimal system just with build-essential and devscripts packages.  But ones
  with optional type differentiator are encouraged to be customized by logging
  into them and add packages as needed, e.g.,  adding password based login for
  SSH access.

OPTIONS: (only the first character matters)
  -help     print this help message and exit
  -query    query the LXC sub-system state and exit
  -stop     stop the base LXC sub-system and exit
  -destroy  destroy the base LXC sub-system and exit
  -update   update the base LXC sub-system before login
  -login    login to the base LXC sub-system instead to its ephemeral copy
            (after login, LXC is stopped)
  -keep     login to the base LXC sub-system and keep it running after login
  -nop      no login to the base LXC nor to its ephemeral copy

=============================================================================
EOF

}

lxcexec_query () {
  sudo lxc-ls -f | {
    while IFS= read -r LINE ; do
      NAME="${LINE%% *}"
      if [ "$NAME" = "NAME" ]; then
        echo "$LINE SHARED_DIRECTORY"
      else
        LXC_PATH=/var/lib/lxc/$NAME/config
        MOUNT_LINE="$($SUDO sed -ne "/^lxc.mount.entry=/s/^lxc.mount.entry=//p" "$LXC_PATH" || true)"
        MOUNT_PATH="${MOUNT_LINE%% *}"
        if [ -n "$MOUNT_PATH" ]; then
          echo "$LINE $MOUNT_PATH"
        else
          echo "$LINE -----"
        fi
      fi
    done
  }
}

lxcexec_stop () {
  echo "I: stop LXC=$LXC_NAME ..." >&2
  $SUDO lxc-stop -n $LXC_NAME || true
  echo "I: stop LXC=$LXC_NAME done" >&2
}

lxcexec_destroy () {
  echo "I: destroy LXC=$LXC_NAME by this $PROG ..." >&2
  $SUDO lxc-stop -n $LXC_NAME || true
  $SUDO lxc-destroy -n $LXC_NAME || true
  $SUDO rm -rf $LXC_BASE || true
  echo "I: check remaining LXC" >&2
  $SUDO tree -d -L 1 ${LXC_BASE%/*} || true
  echo "I: destroy LXC=$LXC_NAME by this $PROG done" >&2
}

lxcexec_create () {
  cat >&2 << EOF
=============================================================================
###
### Setting up LXC                      $LXC_NAME
###   Distribution                      $LXC_CREATE_DIST
###   Release                           $LXC_CREATE_RELEASE
###                                     _____________________________________
###   Shared directory:                 $HOST_SHARE_DIR
###                                     '''''''''''''''''''''''''''''''''''''
###     permissions                     $(stat --format="%A" .)
###     owner                           $(stat --format="%U:%G" .)
###     # of sub-projects:              $(find ./ -xdev -maxdepth 1 -mindepth 1 -type d  | wc -l)
###     # of files in their root:       $(find ./ -xdev -maxdepth 2 -mindepth 2 -type f  | wc -l)
###
###     !!! please note shared directory spans only within the same device !!!
###
=============================================================================
EOF
read -p "Is this OK? If so, we will create LXC. (Yes/no) " -r REPLY
  if [ -z "${REPLY%%[yY]*}" ] ; then
    echo "I: ... OK creating LXC" >&2
  else
    echo "I: ... Oops ... aborting" >&2
    exit 1
  fi
  echo "I: check choice of shared directory" >&2
  if [ ! -d  "$HOST_SHARE_DIR" ] ; then
    echo "I: host share directory $HOST_SHARE_DIR missing ... aborting" >&2
    exit 1
  fi
  if [ "$(stat --format=%U .)" != "$HOST_USER_NAME" ]; then
    echo "I: Shared directory must be owned by $HOST_USER_NAME ... aborting" >&2
    exit 1
  fi
  if [ "$HOST_SHARE_DIR" = "$HOME" ]; then
    echo "I: Shared directory must not be $HOME ... aborting" >&2
    exit 1
  fi
  if [ "$HOST_SHARE_DIR" = "$HOME/bin" ]; then
    echo "I: Shared directory isn't $HOME/bin (guess) ... aborting" >&2
    echo "I:   (to force this, edit config manually)" >&2
    exit 1
  fi
  # initial set up including user account, sudo, ...
  echo "I: create LXC=$LXC_NAME" >&2
  $SUDO sh -e << HOST_EOF
lxc-create -n $LXC_NAME -t $LXC_CREATE_DIST -- $LXC_CREATE_OPTIONS
echo "I: start LXC=$LXC_NAME for initial setups" >&2
lxc-start -n $LXC_NAME
echo "I: wait for $LXC_START_WAIT_TIME to start LXC=$LXC_NAME for initial setups ..."
sleep $LXC_START_WAIT_TIME
echo "I: LXC=$LXC_NAME ready for initial setups"
HOST_EOF
  $SUDO lxc-attach -n $LXC_NAME << LXC_EOF
echo "I: LXC=$LXC_NAME update & upgrade" >&2
apt-get update
apt-get -y dist-upgrade
echo "I: LXC=$LXC_NAME install sudo and base packages"
apt-get -y install sudo  $BASE_PACKAGES || true
echo "I: add user $HOST_USER_NAME in LXC=$LXC_NAME" >&2
adduser --disabled-password  --gecos "UID 1000 in LXC,,," "$HOST_USER_NAME"
mkdir -p /home/$HOST_USER_NAME/src
chown $HOST_USER_NAME:$HOST_USER_NAME /home/$HOST_USER_NAME/src
echo "$HOST_USER_NAME ALL = NOPASSWD: ALL" >/etc/sudoers.d/lxcexec
LXC_EOF
  echo "I: set up to share HOST_SHARE_DIR=$HOST_SHARE_DIR to LXC=$LXC_NAME" >&2
  $SUDO sh << HOST_EOF
echo "I: stop LXC=$LXC_NAME before finishing initial setups" >&2
lxc-stop -n $LXC_NAME
echo "I: add lxcexec mount entry for LXC=$LXC_NAME" >&2
echo '

# lxcexec mount point: $HOST_SHARE_DIR
lxc.mount.entry=$HOST_SHARE_DIR home/$HOST_USER_NAME/src none bind 0 0
' >>/var/lib/lxc/$LXC_NAME/config
echo "I: create $LXC_STATE after initial setups" >&2
echo "1" > $LXC_STATE
HOST_EOF
  echo "I: created and configured LXC=$LXC_NAME" >&2
}

lxcexec_shared () {
  $SUDO sed -n '/^# lxcexec mount point:/s/# lxcexec mount point: //p' /var/lib/lxc/$LXC_NAME/config
}

lxcexec_update () {
  echo "I: update LXC=$LXC_NAME ..."
  if is_lxc stopped ; then
    echo "I: start LXC=$LXC_NAME"
    $SUDO lxc-start -n $LXC_NAME
    echo "I: wait for $LXC_START_WAIT_TIME to start LXC=$LXC_NAME for update ..."
    sleep $LXC_START_WAIT_TIME
    echo "I: LXC=$LXC_NAME ready for update"
  elif is_lxc running ; then
    F_KEEP_RUNNING=true
    echo "I: LXC=$LXC_NAME is running ... keep it" >&2
    echo "I: ... be careful for the race condition" >&2
  else
    echo "I: LXC=$LXC_NAME is not stopped nor running for update ... aborting" >&2
    exit 1
  fi
  $SUDO lxc-attach -n $LXC_NAME << LXC_EOF
echo "I: LXC=$LXC_NAME update & upgrade"
apt-get update
apt-get -y dist-upgrade
LXC_EOF
  if $F_KEEP_RUNNING ; then
    echo "I: LXC=$LXC_NAME running after update"
  else
    $SUDO lxc-stop -n $LXC_NAME
    echo "I: LXC=$LXC_NAME stopped after update"
  fi
}

lxcexec_login () {
  if is_lxc stopped ; then
    echo "I: LXC=$LXC_NAME is stopped before login"
    $SUDO lxc-start -n $LXC_NAME
    echo "I: wait for $LXC_START_WAIT_TIME to start LXC=$LXC_NAME for login ... "
    sleep $LXC_START_WAIT_TIME
    echo "I: LXC=$LXC_NAME ready state=1"
  elif is_lxc running ; then
    F_KEEP_RUNNING=true
    echo "I: LXC=$LXC_NAME is running in state=1 ... keep it" >&2
    echo "I: ... be careful for the race condition" >&2
  else
    echo "I: LXC=$LXC_NAME is not stopped nor running for login ... aborting" >&2
    exit 1
  fi
  echo "I: interactive shell in LXC=$LXC_NAME as user=$HOST_USER_NAME (sudo capable)" >&2
  echo "I: ... find all shared files under ~/src" >&2
  echo ""
  $SUDO lxc-attach -n $LXC_NAME --clear-env --uid $HOST_USER_UID -- sh -c "cd /home/$HOST_USER_NAME ; HOME=/home/$HOST_USER_NAME TERM=$TERM exec bash -i"
  if $F_KEEP_RUNNING ; then
    echo "I: LXC=$LXC_NAME running after login"
  else
    $SUDO lxc-stop -n $LXC_NAME
    echo "I: LXC=$LXC_NAME stopped after login"
  fi
}

lxcexec_login_ephemeral () {
  if is_lxc stopped ; then
    echo "I: LXC=$LXC_NAME is stopped as parent"
    $SUDO lxc-copy -e -n $LXC_NAME -N ${LXC_NAME}-${EPH_ID}
    echo "I: wait for $LXC_START_WAIT_TIME to start LXC=$LXC_NAME -> ${LXC_NAME}-${EPH_ID}"
    sleep $LXC_START_WAIT_TIME
    echo "I: LXC=${LXC_NAME}-${EPH_ID} ready (ephemeral)"
  else
    echo "I: LXC=$LXC_NAME is not stopped as parent ... lxc-copy impossible ... aborting" >&2
    exit 1
  fi
  echo "I: interactive shell in ephemeral LXC=${LXC_NAME}-${EPH_ID} as user=$HOST_USER_NAME (sudo capable)" >&2
  echo "I: ... find all shared files under ~/src" >&2
  echo ""
  $SUDO lxc-attach -n ${LXC_NAME}-${EPH_ID} --clear-env --uid $HOST_USER_UID -- sh -c "cd /home/$HOST_USER_NAME ; HOME=/home/$HOST_USER_NAME TERM=$TERM exec bash -i"
  $SUDO lxc-stop -n ${LXC_NAME}-${EPH_ID}
  echo "I: LXC=${LXC_NAME}-${EPH_ID} stopped after login and destroyed since ephemeral"
}


#######################################################################
# main
#######################################################################
F_UPDATE=false
F_STOP=false
F_DESTROY=false
F_NOP=false
F_EPHEMERAL=true
F_KEEP_RUNNING=false

# parse command line
while [ -n "$1" ]; do
  case $1 in
    -q*)
      lxcexec_query
      exit 0
      ;;
    -h*)
      lxcexec_help
      exit 0
      ;;
    -s*)
      F_STOP=true
      ;;
    -d*) F_DESTROY=true
      ;;
    -u*) F_UPDATE=true
      ;;
    -l*) F_EPHEMERAL=false
      ;;
    -n*) F_NOP=true
      ;;
    --) shift
      LXC_NAME=$1
      ;;
    -k*) F_KEEP_RUNNING=true
      F_EPHEMERAL=false
      ;;
    *) LXC_NAME=$1
      ;;
  esac
  shift
done

# update variables
LXC_BASE="${LXC_BASE:-/var/lib/lxc/$LXC_NAME}"
LXC_STATE="${LXC_STATE:-$LXC_BASE/lxcexec_state}"

LXC_CREATE_RELEASE="${LXC_NAME%%[-._]*}"
LXC_CREATE_OPTIONS="${LXC_CREATE_OPTIONS:- -r $LXC_CREATE_RELEASE --mirror=http://deb.debian.org/debian}"
#LXC_CREATE_OPTIONS="${LXC_CREATE_OPTIONS:- -r $LXC_CREATE_RELEASE --mirror=http://cdn-fastly.deb.debian.org/debian}"

if $F_STOP ; then
  lxcexec_stop
  exit 0
fi

if $F_DESTROY ; then
  lxcexec_destroy
  exit 0
fi

if [ "$LXC_NAME" = "$LXC_CREATE_RELEASE" ]; then
  # for dependency check via ephemeral LXC
  BASE_PACKAGES="build-essential devscripts vim-tiny nano-"
else
  # for development platform
  BASE_PACKAGES="build-essential devscripts aptitude mc nano- vim git wget openssh-server openssh-client screen gnupg sudo fzf moreutils ssh-askpass rename time parallel xclip xsel"
fi
echo "I: ensure to create BASE LXC=$LXC_NAME if it doesn't exist" >&2
if [ -d "$LXC_BASE" ] ; then
  if is_lxc defined ; then
    if $SUDO test -f $LXC_STATE ; then
      echo "I: LXC=$LXC_NAME already generated by this $PROG ... skip creating" >&2
    else
      echo "I: LXC=$LXC_NAME already generated but not by $PROG ... aborting" >&2
      exit 1
    fi
  else
    echo "I: LXC=$LXC_NAME not generated but $LXC_BASE exists ... aborting" >&2
    exit 1
  fi
else
  lxcexec_create
fi

echo "I: ++++++++++++++++++++++++++++++++++++++++++++++++++++++++" >&2
echo "I: use LXC=$LXC_NAME as base" >&2
echo "I:   sharing $(lxcexec_shared) on host" >&2

if [ "$($SUDO cat $LXC_STATE)" = "1" ] ; then
  if $F_UPDATE ; then
    echo "I:   updating LXC=$LXC_NAME" >&2
    lxcexec_update
    echo "I: ++++++++++++++++++++++++++++++++++++++++++++++++++++++++" >&2
  fi
  if ! $F_NOP ; then
    if ! $F_EPHEMERAL ; then
      echo "I:   login to LXC=$LXC_NAME" >&2
      echo "I: ++++++++++++++++++++++++++++++++++++++++++++++++++++++++" >&2
      lxcexec_login
    else
      echo "I:   ephemeral login using LXC=$LXC_NAME as base" >&2
      echo "I: ++++++++++++++++++++++++++++++++++++++++++++++++++++++++" >&2
      lxcexec_login_ephemeral
    fi
  else
    echo "I:   NOP for LXC=$LXC_NAME" >&2
    echo "I: ++++++++++++++++++++++++++++++++++++++++++++++++++++++++" >&2
  fi
fi

