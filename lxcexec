#!/bin/sh -e
# shellcheck disable=SC2046,SC2086
# vim:set ai si ts=2 sts=2 sw=2 et:
#
# configuration
#
# Reminder for here-doc-text:
# If the delimiter is quoted, the here-doc-text is treated literally,
# otherwise the text is subjected to expansions.
# If “<<-” is used instead of “<<”, then leading tabs are stripped.
#######################################################################
# Internal constant
LC_ALL=en_US.UTF-8
export LC_ALL
PROG="${0##*/}"
LXC_NAME="${LXC_NAME:-sid}"
LXC_CREATE_DIST="${LXC_CREATE_DIST:-debian}"
LXC_CREATE_RELEASE="${LXC_CREATE_RELEASE:-${LXC_NAME%%[-._]*}}"
SUDO="${SUDO:-sudo}"
LXC_EXEC="lxc-attach -n $LXC_NAME"
LXC_BASE="${LXC_BASE:-/var/lib/lxc/$LXC_NAME}"
LXC_STATE="${LXC_STATE:-$LXC_BASE/lxcexec_state}"
LXC_CREATE_OPTIONS="${LXC_CREATE_OPTIONS:---mirror=http://cdn-fastly.deb.debian.org/debian}"
HOST_USER_UID=$(id -u)
HOST_USER_NAME=$(id -nu)
HOST_SHARE_DIR="${HOST_SHARE_DIR:-/home/$HOST_USER_NAME/src/public}"
LXC_START_WAIT_TIME="5" # sec
BASE_PACKAGES="build-essential devscripts mc nano- vim git wget"
#######################################################################
# functions
#######################################################################
is_lxc () {
  # check if LXC $1=active/frozen/running/stopped/defined
  if $SUDO lxc-ls -1 --$1 | grep -q --color=none -F -x "$LXC_NAME" ; then
    # $LXC_NAME is $1
    return 0
  else
    return 1
  fi
}

#######################################################################
# main
#######################################################################
#if [ ! -d  "$HOST_SHARE_DIR" ] ; then
#  HOST_SHARE_DIR=$(pwd)
#  echo "I: set host share directory HOST_SHARE_DIR=$HOST_SHARE_DIR" >&2
#fi
if [ ! -d  "$HOST_SHARE_DIR" ] ; then
  echo "I: host share directory $HOST_SHARE_DIR missing ... aborting" >&2
  echo "I: set HOST_SHARE_DIR to the existing directory" >&2
  exit 1
fi

if [ "$1" = "-r" ]; then
  echo "I: reset LXC=$LXC_NAME by this $PROG" >&2
  $SUDO lxc-stop -n $LXC_NAME || true
  $SUDO lxc-destroy -n $LXC_NAME || true
  $SUDO rm -rf $LXC_BASE || true
  $SUDO tree -L 2 ${LXC_BASE%/*} || true
fi

echo "I: ensure to create BASE LXC=$LXC_NAME" >&2
if [ -d "$LXC_BASE" ] ; then
  if is_lxc defined ; then
    if $SUDO test -f $LXC_STATE ; then
      echo "I: LXC=$LXC_NAME already generated by this $PROG" >&2
    else
      echo "I: LXC=$LXC_NAME already generated but not by $PROG ... aborting" >&2
      exit 1
    fi
  else
    echo "I: LXC=$LXC_NAME not generated but $LXC_BASE exists ... aborting" >&2
    exit 1
  fi
else
  # initial set up including user account, sudo, ...
echo "I: create LXC=$LXC_NAME" >&2
  $SUDO sh << HOST_EOF
lxc-create -n $LXC_NAME -t $LXC_CREATE_DIST -- -r $LXC_CREATE_RELEASE $LXC_CREATE_OPTIONS
echo "0" > $LXC_STATE
echo "I: start LXC=$LXC_NAME in state=0" >&2
lxc-start -n $LXC_NAME
echo "I: wait for $LXC_START_WAIT_TIME to start LXC=$LXC_NAME state=0 ..."
sleep $LXC_START_WAIT_TIME
echo "I: LXC=$LXC_NAME ready state=0"
HOST_EOF
  $SUDO $LXC_EXEC << LXC_EOF
echo "I: LXC=$LXC_NAME update & upgrade" >&2
apt-get update
apt-get -y dist-upgrade
echo "I: LXC=$LXC_NAME install sudo and base packages"
apt-get -y install sudo  $BASE_PACKAGES || true
echo "I: LXC=$LXC_NAME add user $HOST_USER_NAME" >&2
yes | adduser --disabled-password  --gecos "LXC subsystem to share data with host" "$HOST_USER_NAME"
mkdir -p /home/$HOST_USER_NAME/src
chown $HOST_USER_NAME:$HOST_USER_NAME /home/$HOST_USER_NAME/src
echo "$HOST_USER_NAME ALL = NOPASSWD: ALL" >/etc/sudoers.d/lxcexec
LXC_EOF
  $SUDO sh << HOST_EOF
echo "I: stop LXC=$LXC_NAME in state=0" >&2
lxc-stop -n $LXC_NAME
echo "I: add lxcexec mount entry for LXC=$LXC_NAME" >&2
echo '

# lxcexec mount point: $HOST_SHARE_DIR
lxc.mount.entry=$HOST_SHARE_DIR home/$HOST_USER_NAME/src none bind 0 0
' >>/var/lib/lxc/$LXC_NAME/config
echo "I: set LXC=$LXC_NAME state=1" >&2
echo "1" > $LXC_STATE
HOST_EOF
  echo "I: created and set up LXC=$LXC_NAME" >&2
fi

if [ "$($SUDO cat $LXC_STATE)" = "1" ] ; then
  if is_lxc stopped ; then
    echo "I: LXC=$LXC_NAME is stopped and state=1"
    $SUDO lxc-start -n $LXC_NAME
    echo "I: wait for $LXC_START_WAIT_TIME to start LXC=$LXC_NAME state=1 ..."
    sleep $LXC_START_WAIT_TIME
    echo "I: LXC=$LXC_NAME ready state=1"
  elif is_lxc running ; then
    echo "I: LXC=$LXC_NAME is running in state=1 ... keep it" >&2
    echo "I: ... be careful for the race condition" >&2
  else
    echo "I: LXC=$LXC_NAME is not stopped nor running in state=1 ... aborting" >&2
    exit 1
  fi
  $SUDO $LXC_EXEC << LXC_EOF
echo "I: LXC=$LXC_NAME update & upgrade in state=1"
apt-get update
apt-get -y dist-upgrade
LXC_EOF
  echo "I: interactive shell in LXC=$LXC_NAME as user=$HOST_USER_NAME (sudo capable)" >&2
  echo "I: ... find all shared files under ~/src" >&2
  echo ""
  $SUDO $LXC_EXEC --clear-env --uid $HOST_USER_UID -- sh -c "cd /home/$HOST_USER_NAME ; HOME=/home/$HOST_USER_NAME TERM=$TERM exec bash -i"
else
  echo "I: LXC=$LXC_NAME not state=1" >&2
fi

